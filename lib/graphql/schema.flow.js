// @flow

//
// ‚ùå WARNING: This file is autogenerated.
// üëâ Please use `npm run schema:generate`
//

/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {|
  ID: string,
  String: string,
  Boolean: boolean,
  Int: number,
  Float: number,
  /** The javascript `Date` as string. Type represents date and time as the ISO Date string. */
  DateTime: any,
|};

/** The bank account of the current user */
export type Account = {|
  __typename?: 'Account',
  publicId: $ElementType<Scalars, 'ID'>,
  iban: $ElementType<Scalars, 'String'>,
  cardHolderRepresentation?: ?$ElementType<Scalars, 'String'>,
  availableBalance: $ElementType<Scalars, 'Int'>,
  bic: $ElementType<Scalars, 'String'>,
  canCreateOverdraft: $ElementType<Scalars, 'Boolean'>,
  cardHolderRepresentations: Array<$ElementType<Scalars, 'String'>>,
  hasPendingCardFraudCase: $ElementType<Scalars, 'Boolean'>,
  pendingTransactionVerification: PendingTransactionVerification,
  transfers: TransfersConnection,
  transaction?: ?Transaction,
  transactions: TransactionsConnection,
  transactionsCSV: $ElementType<Scalars, 'String'>,
  transfer?: ?Transfer,
  /** Different information about account balances, e.g. taxes, VAT, ... */
  stats: AccountStats,
  /** Individual tax-related settings per year */
  taxYearSettings: Array<TaxYearSetting>,
  /** A list of iban/name combinations based on existing user's transactions, provided to assist users when creating new transfers */
  transferSuggestions?: ?Array<TransferSuggestion>,
  cards: Array<Card>,
  card?: ?Card,
  /** Overdraft Application - only available for Kontist Application */
  overdraft?: ?Overdraft,
  balance: $ElementType<Scalars, 'Int'>,
  declarations: Array<Declaration>,
  declarationPdfUrl?: ?$ElementType<Scalars, 'String'>,
  declarationStats: DeclarationStats,
|};


/** The bank account of the current user */
export type AccountTransfersArgs = {|
  where?: ?TransfersConnectionFilter,
  type: TransferType,
  first?: ?$ElementType<Scalars, 'Int'>,
  last?: ?$ElementType<Scalars, 'Int'>,
  after?: ?$ElementType<Scalars, 'String'>,
  before?: ?$ElementType<Scalars, 'String'>,
|};


/** The bank account of the current user */
export type AccountTransactionArgs = {|
  id: $ElementType<Scalars, 'ID'>,
|};


/** The bank account of the current user */
export type AccountTransactionsArgs = {|
  filter?: ?TransactionFilter,
  first?: ?$ElementType<Scalars, 'Int'>,
  last?: ?$ElementType<Scalars, 'Int'>,
  after?: ?$ElementType<Scalars, 'String'>,
  before?: ?$ElementType<Scalars, 'String'>,
|};


/** The bank account of the current user */
export type AccountTransactionsCsvArgs = {|
  to?: ?$ElementType<Scalars, 'DateTime'>,
  from?: ?$ElementType<Scalars, 'DateTime'>,
|};


/** The bank account of the current user */
export type AccountTransferArgs = {|
  id: $ElementType<Scalars, 'ID'>,
  type: TransferType,
|};


/** The bank account of the current user */
export type AccountCardArgs = {|
  filter?: ?CardFilter,
|};


/** The bank account of the current user */
export type AccountDeclarationsArgs = {|
  type: DeclarationType,
|};


/** The bank account of the current user */
export type AccountDeclarationPdfUrlArgs = {|
  id: $ElementType<Scalars, 'Int'>,
|};


/** The bank account of the current user */
export type AccountDeclarationStatsArgs = {|
  year: $ElementType<Scalars, 'Int'>,
  period: $ElementType<Scalars, 'String'>,
|};

export const AccountStateValues = Object.freeze({
  Free: 'FREE',
  Trial: 'TRIAL',
  Premium: 'PREMIUM',
  Blocked: 'BLOCKED',
  FreeOld: 'FREE_OLD',
  PremiumOld: 'PREMIUM_OLD'
});


export type AccountState = $Values<typeof AccountStateValues>;

export type AccountStats = {|
  __typename?: 'AccountStats',
  /** The amount that is currently available on the bank account */
  accountBalance: $ElementType<Scalars, 'Int'>,
  /** The amount that can be spent after VAT and taxes calculation */
  yours: $ElementType<Scalars, 'Int'>,
  /** The amount that is not categorized */
  unknown: $ElementType<Scalars, 'Int'>,
  /** The amount that can be spent plus the amount from uknown */
  main: $ElementType<Scalars, 'Int'>,
  /** The amount of VAT that is owed (current + last years) */
  vatTotal: $ElementType<Scalars, 'Int'>,
  /** The amount of VAT that is owed in the current year */
  vatAmount: $ElementType<Scalars, 'Int'>,
  /** The difference between vatTotal and accountBalance, if vatTotal > accountBalance */
  vatMissing: $ElementType<Scalars, 'Int'>,
  /** The amount of tax that is owed (current + last years) */
  taxTotal: $ElementType<Scalars, 'Int'>,
  /** The amount of tax that is owed in the current year */
  taxCurrentYearAmount: $ElementType<Scalars, 'Int'>,
  /** The amount of tax that was owed for all past years combined */
  taxPastYearsAmount?: ?$ElementType<Scalars, 'Int'>,
  /** The difference between taxTotal and accountBalance, if taxTotal > accountbalance */
  taxMissing: $ElementType<Scalars, 'Int'>,
|};

export type Asset = {|
  __typename?: 'Asset',
  id: $ElementType<Scalars, 'ID'>,
  name: $ElementType<Scalars, 'String'>,
  filetype: $ElementType<Scalars, 'String'>,
  assetableId: $ElementType<Scalars, 'ID'>,
  path: $ElementType<Scalars, 'String'>,
  thumbnail: $ElementType<Scalars, 'String'>,
  fullsize: $ElementType<Scalars, 'String'>,
|};

export type AttributionData = {|
  /** Platform used for signup */
  platform?: ?Platform,
  trackingId?: ?$ElementType<Scalars, 'String'>,
  preselected_plan?: ?$ElementType<Scalars, 'String'>,
  utm_source?: ?$ElementType<Scalars, 'String'>,
|};

export type AuthorizeChangeRequestRespone = {|
  __typename?: 'AuthorizeChangeRequestRespone',
  stringToSign: $ElementType<Scalars, 'String'>,
|};

export type AvailableStatements = {|
  __typename?: 'AvailableStatements',
  year: $ElementType<Scalars, 'Int'>,
  months: Array<$ElementType<Scalars, 'Int'>>,
|};

export type Banner = {|
  __typename?: 'Banner',
  name: BannerName,
  dismissedAt?: ?$ElementType<Scalars, 'DateTime'>,
  isVisible: $ElementType<Scalars, 'Boolean'>,
|};

export const BannerNameValues = Object.freeze({
  Overdraft: 'OVERDRAFT',
  Bookkeeping: 'BOOKKEEPING',
  FriendReferral: 'FRIEND_REFERRAL',
  PrimaryWebapp: 'PRIMARY_WEBAPP',
  TaxService: 'TAX_SERVICE',
  VatDeclaration: 'VAT_DECLARATION'
});


export type BannerName = $Values<typeof BannerNameValues>;

export const BaseOperatorValues = Object.freeze({
  Or: 'OR',
  And: 'AND'
});


export type BaseOperator = $Values<typeof BaseOperatorValues>;

export type BatchTransfer = {|
  __typename?: 'BatchTransfer',
  id: $ElementType<Scalars, 'String'>,
  status: BatchTransferStatus,
  transfers: Array<SepaTransfer>,
|};

export const BatchTransferStatusValues = Object.freeze({
  AuthorizationRequired: 'AUTHORIZATION_REQUIRED',
  ConfirmationRequired: 'CONFIRMATION_REQUIRED',
  Accepted: 'ACCEPTED',
  Failed: 'FAILED',
  Successful: 'SUCCESSFUL'
});


export type BatchTransferStatus = $Values<typeof BatchTransferStatusValues>;

export type Card = {|
  __typename?: 'Card',
  id: $ElementType<Scalars, 'String'>,
  status: CardStatus,
  type: CardType,
  pinSet: $ElementType<Scalars, 'Boolean'>,
  addedToApplePay: $ElementType<Scalars, 'Boolean'>,
  holder?: ?$ElementType<Scalars, 'String'>,
  formattedExpirationDate?: ?$ElementType<Scalars, 'String'>,
  maskedPan?: ?$ElementType<Scalars, 'String'>,
  settings: CardSettings,
  googlePayTokens: Array<GooglePayCardToken>,
|};

export const CardActionValues = Object.freeze({
  Close: 'CLOSE',
  Block: 'BLOCK',
  Unblock: 'UNBLOCK'
});


export type CardAction = $Values<typeof CardActionValues>;

export type CardFilter = {|
  id?: ?$ElementType<Scalars, 'String'>,
  type?: ?CardType,
|};

export type CardLimit = {|
  __typename?: 'CardLimit',
  maxAmountCents: $ElementType<Scalars, 'Float'>,
  maxTransactions: $ElementType<Scalars, 'Float'>,
|};

export type CardLimitInput = {|
  maxAmountCents: $ElementType<Scalars, 'Float'>,
  maxTransactions: $ElementType<Scalars, 'Float'>,
|};

export type CardLimits = {|
  __typename?: 'CardLimits',
  daily: CardLimit,
  monthly: CardLimit,
|};

export type CardLimitsInput = {|
  daily: CardLimitInput,
  monthly: CardLimitInput,
|};

export type CardSettings = {|
  __typename?: 'CardSettings',
  contactlessEnabled: $ElementType<Scalars, 'Boolean'>,
  cardPresentLimits?: ?CardLimits,
  cardNotPresentLimits?: ?CardLimits,
|};

export type CardSettingsInput = {|
  cardPresentLimits?: ?CardLimitsInput,
  cardNotPresentLimits?: ?CardLimitsInput,
  contactlessEnabled?: ?$ElementType<Scalars, 'Boolean'>,
|};

export const CardStatusValues = Object.freeze({
  Processing: 'PROCESSING',
  Inactive: 'INACTIVE',
  Active: 'ACTIVE',
  Blocked: 'BLOCKED',
  BlockedBySolaris: 'BLOCKED_BY_SOLARIS',
  ActivationBlockedBySolaris: 'ACTIVATION_BLOCKED_BY_SOLARIS',
  Closed: 'CLOSED',
  ClosedBySolaris: 'CLOSED_BY_SOLARIS'
});


export type CardStatus = $Values<typeof CardStatusValues>;

export const CardTypeValues = Object.freeze({
  VirtualVisaBusinessDebit: 'VIRTUAL_VISA_BUSINESS_DEBIT',
  VisaBusinessDebit: 'VISA_BUSINESS_DEBIT',
  MastercardBusinessDebit: 'MASTERCARD_BUSINESS_DEBIT',
  VirtualMastercardBusinessDebit: 'VIRTUAL_MASTERCARD_BUSINESS_DEBIT',
  VirtualVisaFreelanceDebit: 'VIRTUAL_VISA_FREELANCE_DEBIT'
});


export type CardType = $Values<typeof CardTypeValues>;

export const CaseResolutionValues = Object.freeze({
  Pending: 'PENDING',
  Confirmed: 'CONFIRMED',
  Whitelisted: 'WHITELISTED',
  TimedOut: 'TIMED_OUT',
  Timeout: 'TIMEOUT'
});


export type CaseResolution = $Values<typeof CaseResolutionValues>;

export const CategorizationTypeValues = Object.freeze({
  AutomaticKontistMl: 'AUTOMATIC_KONTIST_ML',
  BookkeepingPartner: 'BOOKKEEPING_PARTNER',
  User: 'USER',
  Kontax: 'KONTAX',
  Invoicing: 'INVOICING',
  UserOverwrite: 'USER_OVERWRITE'
});


export type CategorizationType = $Values<typeof CategorizationTypeValues>;

export type CategorizeTransactionForDeclarationResponse = {|
  __typename?: 'CategorizeTransactionForDeclarationResponse',
  categoryCode?: ?$ElementType<Scalars, 'String'>,
  category?: ?TransactionCategory,
  date?: ?$ElementType<Scalars, 'String'>,
|};

export type CategoryGroup = {|
  __typename?: 'CategoryGroup',
  categoryCode: $ElementType<Scalars, 'String'>,
  amount: $ElementType<Scalars, 'Int'>,
  categoryCodeTranslation: $ElementType<Scalars, 'String'>,
  transactions: Array<TransactionForAccountingView>,
|};

export type Client = {|
  __typename?: 'Client',
  id: $ElementType<Scalars, 'ID'>,
  /** The URL to redirect to after authentication */
  redirectUri?: ?$ElementType<Scalars, 'String'>,
  /** The name of the OAuth2 client displayed when users log in */
  name: $ElementType<Scalars, 'String'>,
  /** The grant types (i.e. ways to obtain access tokens) allowed for the client */
  grantTypes?: ?Array<GrantType>,
  /** The scopes the client has access to, limiting access to the corresponding parts of the API */
  scopes?: ?Array<ScopeType>,
|};

export const CompanyTypeValues = Object.freeze({
  Selbstaendig: 'SELBSTAENDIG',
  Einzelunternehmer: 'EINZELUNTERNEHMER',
  Freiberufler: 'FREIBERUFLER',
  Gewerbetreibender: 'GEWERBETREIBENDER',
  Limited: 'LIMITED',
  EK: 'E_K',
  Partgg: 'PARTGG',
  Gbr: 'GBR',
  Ohg: 'OHG',
  Kg: 'KG',
  Kgaa: 'KGAA',
  Gmbh: 'GMBH',
  GmbhUndCoKg: 'GMBH_UND_CO_KG',
  Ug: 'UG'
});


export type CompanyType = $Values<typeof CompanyTypeValues>;

export type ConfirmChangeRequestRespone = {|
  __typename?: 'ConfirmChangeRequestRespone',
  success: $ElementType<Scalars, 'Boolean'>,
|};

export type ConfirmFraudResponse = {|
  __typename?: 'ConfirmFraudResponse',
  id: $ElementType<Scalars, 'String'>,
  resolution: CaseResolution,
|};

export type ConfirmationRequest = {|
  __typename?: 'ConfirmationRequest',
  confirmationId: $ElementType<Scalars, 'String'>,
|};

export type ConfirmationRequestOrTransfer = ConfirmationRequest | Transfer;

export type ConfirmationStatus = {|
  __typename?: 'ConfirmationStatus',
  status: $ElementType<Scalars, 'String'>,
|};

export type CreateAssetResponse = {|
  __typename?: 'CreateAssetResponse',
  assetId: $ElementType<Scalars, 'ID'>,
  url: $ElementType<Scalars, 'String'>,
  formData: Array<FormDataPair>,
  name?: ?$ElementType<Scalars, 'String'>,
|};

/** The available fields to create an OAuth2 client */
export type CreateClientInput = {|
  /** The name of the OAuth2 client displayed when users log in */
  name: $ElementType<Scalars, 'String'>,
  /** The OAuth2 client secret */
  secret?: ?$ElementType<Scalars, 'String'>,
  /** The URL to redirect to after authentication */
  redirectUri?: ?$ElementType<Scalars, 'String'>,
  /** The grant types (i.e. ways to obtain access tokens) allowed for the client */
  grantTypes: Array<GrantType>,
  /** The scopes the client has access to, limiting access to the corresponding parts of the API */
  scopes: Array<ScopeType>,
|};

export type CreateInvoiceLogoResponse = {|
  __typename?: 'CreateInvoiceLogoResponse',
  url: $ElementType<Scalars, 'String'>,
  formData: Array<InvoiceLogoFormDataPair>,
|};

export type CreateReviewResponse = {|
  __typename?: 'CreateReviewResponse',
  id: $ElementType<Scalars, 'String'>,
|};

/** The available fields to create a SEPA Transfer */
export type CreateSepaTransferInput = {|
  /** The name of the SEPA Transfer recipient */
  recipient: $ElementType<Scalars, 'String'>,
  /** The IBAN of the SEPA Transfer recipient */
  iban: $ElementType<Scalars, 'String'>,
  /** The amount of the SEPA Transfer in cents */
  amount: $ElementType<Scalars, 'Int'>,
  /** The purpose of the SEPA Transfer - 140 max characters */
  purpose?: ?$ElementType<Scalars, 'String'>,
  /** The personal note of the SEPA Transfer - 140 max characters */
  personalNote?: ?$ElementType<Scalars, 'String'>,
  /** The end to end ID of the SEPA Transfer */
  e2eId?: ?$ElementType<Scalars, 'String'>,
|};

export type CreateTransactionSplitsInput = {|
  amount: $ElementType<Scalars, 'Int'>,
  category: TransactionCategory,
  userSelectedBookingDate?: ?$ElementType<Scalars, 'DateTime'>,
|};

/** The available fields to create a transfer */
export type CreateTransferInput = {|
  /** The name of the transfer recipient */
  recipient: $ElementType<Scalars, 'String'>,
  /** The IBAN of the transfer recipient */
  iban: $ElementType<Scalars, 'String'>,
  /** The amount of the transfer in cents */
  amount: $ElementType<Scalars, 'Int'>,
  /** The date at which the payment will be executed for Timed Orders or Standing Orders */
  executeAt?: ?$ElementType<Scalars, 'DateTime'>,
  /** The date at which the last payment will be executed for Standing Orders */
  lastExecutionDate?: ?$ElementType<Scalars, 'DateTime'>,
  /** The purpose of the transfer - 140 max characters */
  purpose?: ?$ElementType<Scalars, 'String'>,
  /** The personal note of the transfer - 140 max characters */
  personalNote?: ?$ElementType<Scalars, 'String'>,
  /** The end to end ID of the transfer */
  e2eId?: ?$ElementType<Scalars, 'String'>,
  /** The reoccurrence type of the payments for Standing Orders */
  reoccurrence?: ?StandingOrderReoccurrenceType,
  /** The user selected category for the SEPA Transfer */
  category?: ?TransactionCategory,
  /** When a transaction corresponds to a tax or vat payment, the user may specify at which date it should be considered booked */
  userSelectedBookingDate?: ?$ElementType<Scalars, 'DateTime'>,
|};

export type CreateUserInput = {|
  /** User's email. This will be used as their username. */
  email: $ElementType<Scalars, 'String'>,
  password: $ElementType<Scalars, 'String'>,
  language?: ?$ElementType<Scalars, 'String'>,
  attribution?: ?AttributionData,
  marketingConsentAccepted?: ?$ElementType<Scalars, 'Boolean'>,
  /** User has accepted latest Kontist terms when signing up */
  terms?: ?$ElementType<Scalars, 'Boolean'>,
|};

export type Customer = {|
  __typename?: 'Customer',
  id: $ElementType<Scalars, 'ID'>,
  name?: ?$ElementType<Scalars, 'String'>,
  email?: ?$ElementType<Scalars, 'String'>,
  address?: ?$ElementType<Scalars, 'String'>,
  country?: ?$ElementType<Scalars, 'String'>,
  vatNumber?: ?$ElementType<Scalars, 'String'>,
  taxNumber?: ?$ElementType<Scalars, 'String'>,
|};

export type DashboardInvoice = {|
  __typename?: 'DashboardInvoice',
  id: $ElementType<Scalars, 'ID'>,
  status: InvoiceStatusType,
  invoiceNumber?: ?$ElementType<Scalars, 'Int'>,
  dueDate?: ?$ElementType<Scalars, 'DateTime'>,
  paidAt?: ?$ElementType<Scalars, 'DateTime'>,
  transactionId?: ?$ElementType<Scalars, 'ID'>,
  amount?: ?$ElementType<Scalars, 'Int'>,
  name?: ?$ElementType<Scalars, 'String'>,
|};


export type Declaration = {|
  __typename?: 'Declaration',
  period: $ElementType<Scalars, 'String'>,
  year: $ElementType<Scalars, 'Int'>,
  id: $ElementType<Scalars, 'Int'>,
  amount: $ElementType<Scalars, 'Int'>,
  uploadedAt: $ElementType<Scalars, 'DateTime'>,
|};

export type DeclarationStats = {|
  __typename?: 'DeclarationStats',
  amount: $ElementType<Scalars, 'Int'>,
  categoryGroups: Array<CategoryGroup>,
  uncategorized: Array<TransactionForAccountingView>,
|};

export const DeclarationTypeValues = Object.freeze({
  UStVa: 'UStVA'
});


export type DeclarationType = $Values<typeof DeclarationTypeValues>;

export type DependentsTaxIds = {|
  id: $ElementType<Scalars, 'ID'>,
  deTaxId: $ElementType<Scalars, 'String'>,
|};

export type DirectDebitFee = {|
  __typename?: 'DirectDebitFee',
  id: $ElementType<Scalars, 'Int'>,
  type: TransactionFeeType,
  name: $ElementType<Scalars, 'String'>,
  amount: $ElementType<Scalars, 'Int'>,
  usedAt?: ?$ElementType<Scalars, 'DateTime'>,
  invoiceStatus: InvoiceStatus,
|};

export type Discount = {|
  __typename?: 'Discount',
  amount: $ElementType<Scalars, 'Float'>,
  couponIsValid: $ElementType<Scalars, 'Boolean'>,
  subtitle?: ?$ElementType<Scalars, 'String'>,
  description?: ?$ElementType<Scalars, 'String'>,
|};

export type Document = {|
  __typename?: 'Document',
  id: $ElementType<Scalars, 'ID'>,
  name: $ElementType<Scalars, 'String'>,
  type: $ElementType<Scalars, 'String'>,
  note?: ?$ElementType<Scalars, 'String'>,
  createdAt: $ElementType<Scalars, 'DateTime'>,
  url: $ElementType<Scalars, 'String'>,
|};

export const DocumentTypeValues = Object.freeze({
  Voucher: 'VOUCHER',
  Invoice: 'INVOICE'
});


export type DocumentType = $Values<typeof DocumentTypeValues>;

export type FormDataPair = {|
  __typename?: 'FormDataPair',
  key: $ElementType<Scalars, 'String'>,
  value: $ElementType<Scalars, 'String'>,
|};

export const GenderValues = Object.freeze({
  Male: 'MALE',
  Female: 'FEMALE'
});


export type Gender = $Values<typeof GenderValues>;

export type GenericFeature = {|
  __typename?: 'GenericFeature',
  name: $ElementType<Scalars, 'String'>,
|};

export type GooglePayCardToken = {|
  __typename?: 'GooglePayCardToken',
  walletId: $ElementType<Scalars, 'String'>,
  tokenRefId: $ElementType<Scalars, 'String'>,
|};

export const GrantTypeValues = Object.freeze({
  Password: 'PASSWORD',
  AuthorizationCode: 'AUTHORIZATION_CODE',
  RefreshToken: 'REFRESH_TOKEN',
  ClientCredentials: 'CLIENT_CREDENTIALS'
});


export type GrantType = $Values<typeof GrantTypeValues>;

export type Icon = {|
  __typename?: 'Icon',
  uri: $ElementType<Scalars, 'String'>,
|};

export type IdentificationDetails = {|
  __typename?: 'IdentificationDetails',
  /** The link to use for IDNow identification */
  link?: ?$ElementType<Scalars, 'String'>,
  /** The user's IDNow identification status */
  status?: ?IdentificationStatus,
  /** The number of identifications attempted by the user */
  attempts: $ElementType<Scalars, 'Int'>,
|};

export const IdentificationStatusValues = Object.freeze({
  Pending: 'PENDING',
  PendingSuccessful: 'PENDING_SUCCESSFUL',
  PendingFailed: 'PENDING_FAILED',
  Successful: 'SUCCESSFUL',
  Failed: 'FAILED',
  Expired: 'EXPIRED',
  Created: 'CREATED',
  Aborted: 'ABORTED',
  Canceled: 'CANCELED'
});


export type IdentificationStatus = $Values<typeof IdentificationStatusValues>;

export const IdnowReminderTypeValues = Object.freeze({
  Email: 'EMAIL',
  Sms: 'SMS'
});


export type IdnowReminderType = $Values<typeof IdnowReminderTypeValues>;

export const IntegrationTypeValues = Object.freeze({
  Lexoffice: 'LEXOFFICE',
  Debitoor: 'DEBITOOR',
  Fastbill: 'FASTBILL'
});


export type IntegrationType = $Values<typeof IntegrationTypeValues>;

export const InternationalCustomersValues = Object.freeze({
  None: 'NONE',
  Eu: 'EU',
  Worldwide: 'WORLDWIDE'
});


export type InternationalCustomers = $Values<typeof InternationalCustomersValues>;

export type Invoice = {|
  __typename?: 'Invoice',
  id: $ElementType<Scalars, 'ID'>,
  invoiceSettingsId?: ?$ElementType<Scalars, 'String'>,
  customer?: ?Customer,
  status: $ElementType<Scalars, 'String'>,
  invoiceNumber?: ?$ElementType<Scalars, 'Float'>,
  dueDate?: ?$ElementType<Scalars, 'DateTime'>,
  note?: ?$ElementType<Scalars, 'String'>,
  transactionId: $ElementType<Scalars, 'ID'>,
  /** A list of products from the invoice */
  products?: ?Array<InvoiceProductOutput>,
|};

export type InvoiceCustomerInput = {|
  id?: ?$ElementType<Scalars, 'String'>,
  name?: ?$ElementType<Scalars, 'String'>,
  email?: ?$ElementType<Scalars, 'String'>,
  address?: ?$ElementType<Scalars, 'String'>,
  country?: ?$ElementType<Scalars, 'String'>,
  vatNumber?: ?$ElementType<Scalars, 'String'>,
  taxNumber?: ?$ElementType<Scalars, 'String'>,
|};

export type InvoiceCustomerOutput = {|
  __typename?: 'InvoiceCustomerOutput',
  id: $ElementType<Scalars, 'ID'>,
  name?: ?$ElementType<Scalars, 'String'>,
  email?: ?$ElementType<Scalars, 'String'>,
  address?: ?$ElementType<Scalars, 'String'>,
  country?: ?$ElementType<Scalars, 'String'>,
  vatNumber?: ?$ElementType<Scalars, 'String'>,
  taxNumber?: ?$ElementType<Scalars, 'String'>,
|};

export type InvoiceInput = {|
  invoiceSettingsId?: ?$ElementType<Scalars, 'String'>,
  customerId?: ?$ElementType<Scalars, 'String'>,
  status: $ElementType<Scalars, 'String'>,
  dueDate?: ?$ElementType<Scalars, 'DateTime'>,
  note?: ?$ElementType<Scalars, 'String'>,
  id?: ?$ElementType<Scalars, 'String'>,
  products?: ?Array<InvoiceProductInput>,
|};

export type InvoiceLogoFormDataPair = {|
  __typename?: 'InvoiceLogoFormDataPair',
  key: $ElementType<Scalars, 'String'>,
  value: $ElementType<Scalars, 'String'>,
|};

export type InvoiceOutput = {|
  __typename?: 'InvoiceOutput',
  invoiceSettingsId?: ?$ElementType<Scalars, 'String'>,
  customerId?: ?$ElementType<Scalars, 'String'>,
  status: $ElementType<Scalars, 'String'>,
  dueDate?: ?$ElementType<Scalars, 'DateTime'>,
  note?: ?$ElementType<Scalars, 'String'>,
  id?: ?$ElementType<Scalars, 'String'>,
  customer?: ?InvoiceCustomerOutput,
  invoiceNumber?: ?$ElementType<Scalars, 'Float'>,
  products?: ?Array<InvoiceProductOutput>,
|};

export type InvoicePageInfo = {|
  __typename?: 'InvoicePageInfo',
  hasNextPage: $ElementType<Scalars, 'Boolean'>,
  hasPreviousPage: $ElementType<Scalars, 'Boolean'>,
  currentPage: $ElementType<Scalars, 'Int'>,
|};

export type InvoiceProductInput = {|
  description?: ?$ElementType<Scalars, 'String'>,
  price?: ?$ElementType<Scalars, 'Float'>,
  vat?: ?$ElementType<Scalars, 'String'>,
  quantity?: ?$ElementType<Scalars, 'Float'>,
  id?: ?$ElementType<Scalars, 'String'>,
|};

export type InvoiceProductOutput = {|
  __typename?: 'InvoiceProductOutput',
  description?: ?$ElementType<Scalars, 'String'>,
  price?: ?$ElementType<Scalars, 'Float'>,
  vat?: ?$ElementType<Scalars, 'String'>,
  quantity?: ?$ElementType<Scalars, 'Float'>,
  id: $ElementType<Scalars, 'String'>,
|};

export type InvoiceSettingsInput = {|
  senderName?: ?$ElementType<Scalars, 'String'>,
  companyName?: ?$ElementType<Scalars, 'String'>,
  streetLine?: ?$ElementType<Scalars, 'String'>,
  postCode?: ?$ElementType<Scalars, 'String'>,
  city?: ?$ElementType<Scalars, 'String'>,
  country?: ?$ElementType<Scalars, 'String'>,
  email?: ?$ElementType<Scalars, 'String'>,
  phoneNumber?: ?$ElementType<Scalars, 'String'>,
  /** Number of days which get added to today's date to create a default value for due date on invoice creation form */
  dueDateDefaultOffset?: ?$ElementType<Scalars, 'Float'>,
  nextInvoiceNumber?: ?$ElementType<Scalars, 'Float'>,
  taxNumber?: ?$ElementType<Scalars, 'String'>,
  vatNumber?: ?$ElementType<Scalars, 'String'>,
|};

export type InvoiceSettingsOutput = {|
  __typename?: 'InvoiceSettingsOutput',
  senderName?: ?$ElementType<Scalars, 'String'>,
  companyName?: ?$ElementType<Scalars, 'String'>,
  streetLine?: ?$ElementType<Scalars, 'String'>,
  postCode?: ?$ElementType<Scalars, 'String'>,
  city?: ?$ElementType<Scalars, 'String'>,
  country?: ?$ElementType<Scalars, 'String'>,
  email?: ?$ElementType<Scalars, 'String'>,
  phoneNumber?: ?$ElementType<Scalars, 'String'>,
  /** Number of days which get added to today's date to create a default value for due date on invoice creation form */
  dueDateDefaultOffset?: ?$ElementType<Scalars, 'Float'>,
  nextInvoiceNumber?: ?$ElementType<Scalars, 'Float'>,
  taxNumber?: ?$ElementType<Scalars, 'String'>,
  vatNumber?: ?$ElementType<Scalars, 'String'>,
  id: $ElementType<Scalars, 'String'>,
  /** If a user's setting has a logoPath, we calculate a url to the thumbnail from it */
  logoUrl?: ?$ElementType<Scalars, 'String'>,
|};

export const InvoiceStatusValues = Object.freeze({
  Open: 'OPEN',
  Closed: 'CLOSED',
  Rejected: 'REJECTED',
  Pending: 'PENDING'
});


export type InvoiceStatus = $Values<typeof InvoiceStatusValues>;

export const InvoiceStatusTypeValues = Object.freeze({
  Draft: 'DRAFT',
  Created: 'CREATED',
  Sent: 'SENT',
  Paid: 'PAID'
});


export type InvoiceStatusType = $Values<typeof InvoiceStatusTypeValues>;

export type InvoicingDashboardData = {|
  __typename?: 'InvoicingDashboardData',
  pageInfo: InvoicePageInfo,
  data: Array<DashboardInvoice>,
|};

export type Jwe = {|
  alg: $ElementType<Scalars, 'String'>,
  enc: $ElementType<Scalars, 'String'>,
|};

export type Jwk = {|
  kty: $ElementType<Scalars, 'String'>,
  n: $ElementType<Scalars, 'String'>,
  e: $ElementType<Scalars, 'String'>,
|};

export const MaximumCashTransactionsPercentageValues = Object.freeze({
  Null: 'NULL',
  Ten: 'TEN',
  Hundred: 'HUNDRED'
});


export type MaximumCashTransactionsPercentage = $Values<typeof MaximumCashTransactionsPercentageValues>;

export type Money = {|
  __typename?: 'Money',
  amount: $ElementType<Scalars, 'Int'>,
  fullAmount?: ?$ElementType<Scalars, 'Int'>,
  discountPercentage?: ?$ElementType<Scalars, 'Int'>,
|};

export type Mutation = {|
  __typename?: 'Mutation',
  /** Create a transaction Asset and obtain an upload config */
  createTransactionAsset: CreateAssetResponse,
  /** Confirm and validate an Asset upload as completed */
  finalizeTransactionAssetUpload: TransactionAsset,
  /** Remove an Asset from the Transaction and storage */
  deleteTransactionAsset: MutationResult,
  /** Confirm and validate an Asset upload as completed */
  finalizeAssetUpload: Asset,
  /** Remove an Asset from the db and storage */
  deleteAsset: MutationResult,
  /** Cancel an existing Timed Order or Standing Order */
  cancelTransfer: ConfirmationRequestOrTransfer,
  /** Confirm a Standing Order cancellation */
  confirmCancelTransfer: Transfer,
  /** Create an OAuth2 client */
  createClient: Client,
  /** Update an OAuth2 client */
  updateClient: Client,
  /** Delete an OAuth2 client */
  deleteClient: Client,
  /** Update individual tax-related settings per year */
  updateTaxYearSettings: Array<TaxYearSetting>,
  /** Create a transfer. The transfer's type will be determined based on the provided input */
  createTransfer: ConfirmationRequest,
  updateTransfer: ConfirmationRequestOrTransfer,
  /** Confirm a transfer creation */
  confirmTransfer: Transfer,
  /** Create multiple transfers at once. Only regular SEPA Transfers are supported */
  createTransfers: ConfirmationRequest,
  /** Confirm the transfers creation */
  confirmTransfers: BatchTransfer,
  whitelistCard: WhitelistCardResponse,
  confirmFraud: ConfirmFraudResponse,
  authorizeChangeRequest: AuthorizeChangeRequestRespone,
  confirmChangeRequest: ConfirmChangeRequestRespone,
  /** Create a new card */
  createCard: Card,
  /** Activate a card */
  activateCard: Card,
  /** Adds Google Pay card token reference id for given wallet id */
  addGooglePayCardToken: GooglePayCardToken,
  /** Adds card to given wallet */
  cardPushProvisioning: PushProvisioningOutput,
  /** Deletes Google Pay card token reference id for given wallet id */
  deleteGooglePayCardToken: GooglePayCardToken,
  /** Update settings (e.g. limits) */
  updateCardSettings: CardSettings,
  /** Block or unblock or close a card */
  changeCardStatus: Card,
  /** Set a new PIN, needs to be confirmed */
  changeCardPIN: ConfirmationRequest,
  /** Confirm a PIN change request */
  confirmChangeCardPIN: ConfirmationStatus,
  /** Call when customer's card is lost or stolen */
  replaceCard: Card,
  /** Close and order new card. Call when customer's card is damaged */
  reorderCard: Card,
  /** Set the card holder representation for the customer */
  setCardHolderRepresentation: $ElementType<Scalars, 'String'>,
  /** Returns encrypted card details for virtual card */
  virtualCardDetails: $ElementType<Scalars, 'String'>,
  /** Categorize a transaction with an optional custom booking date for VAT or Tax categories, and add a personal note */
  updateTransaction: Transaction,
  /** Create Overdraft Application  - only available for Kontist Application */
  requestOverdraft?: ?Overdraft,
  /** Activate Overdraft Application  - only available for Kontist Application */
  activateOverdraft?: ?Overdraft,
  /** Updates overdraft application timestamps for rejected and offered overdraft screens - only available for Kontist Application */
  updateOverdraft?: ?Overdraft,
  /** Create transaction splits */
  createTransactionSplits: Transaction,
  /** Update transaction splits */
  updateTransactionSplits: Transaction,
  /** Delete transaction splits */
  deleteTransactionSplits: Transaction,
  /** Subscribe user to a plan */
  subscribeToPlan: UserSubscription,
  /** Update user's subscription plan */
  updateSubscriptionPlan: UpdateSubscriptionPlanResult,
  dismissBanner: MutationResult,
  /** Connect user to a bookkeeping partner */
  connectIntegration: MutationResult,
  /** Update user's tax details */
  updateUserTaxDetails: MutationResult,
  /** Updates document meta */
  updateDocument: Document,
  /** Deletes document */
  deleteDocument: MutationResult,
  /** Create a new identification if applicable */
  requestIdentification: IdentificationDetails,
  /** Update user signup information */
  updateUserSignupInformation: MutationResult,
  createUserEmailAlias: MutationResult,
  /** Create a new user */
  createUser: PublicMutationResult,
  /** Update the push-notifications a user should receive */
  updateUserNotifications: Array<Notification>,
  refundDirectDebit: MutationResult,
  createReview: CreateReviewResponse,
  updateReview: MutationResult,
  /** Clear preselected plan */
  clearPreselectedPlan: MutationResult,
  /** Assign a secret coupon code to the user who is rejected from kontax onboarding */
  assignKontaxCouponCodeToDeclinedUser: MutationResult,
  updateInvoiceSettings: InvoiceSettingsOutput,
  /** The logo a user can add to his invoice. The path to it is stored in invoiceSettings */
  createInvoiceLogo: CreateInvoiceLogoResponse,
  /** Deletes the logo of a user's settings entry */
  deleteInvoiceLogo: MutationResult,
  /** Allow user to sign Power of Attorney */
  signPOA: MutationResult,
  updateInvoiceCustomer: InvoiceCustomerOutput,
  updateInvoice: InvoiceOutput,
  deleteInvoice: MutationResult,
  duplicateInvoice: InvoiceOutput,
  /** Create or update user products that can be linked to the user's invoice(s) */
  upsertProducts: Array<Product>,
  /** Categorize transaction for VAT declaration */
  categorizeTransactionForDeclaration: CategorizeTransactionForDeclarationResponse,
  /** Submits UStVA declaration */
  submitDeclaration: Declaration,
|};


export type MutationCreateTransactionAssetArgs = {|
  assetableType?: ?$ElementType<Scalars, 'String'>,
  filetype: $ElementType<Scalars, 'String'>,
  name: $ElementType<Scalars, 'String'>,
  transactionId: $ElementType<Scalars, 'ID'>,
|};


export type MutationFinalizeTransactionAssetUploadArgs = {|
  assetId: $ElementType<Scalars, 'ID'>,
|};


export type MutationDeleteTransactionAssetArgs = {|
  assetId: $ElementType<Scalars, 'ID'>,
|};


export type MutationFinalizeAssetUploadArgs = {|
  assetId: $ElementType<Scalars, 'ID'>,
|};


export type MutationDeleteAssetArgs = {|
  assetId: $ElementType<Scalars, 'ID'>,
|};


export type MutationCancelTransferArgs = {|
  id: $ElementType<Scalars, 'String'>,
  type: TransferType,
|};


export type MutationConfirmCancelTransferArgs = {|
  authorizationToken: $ElementType<Scalars, 'String'>,
  confirmationId: $ElementType<Scalars, 'String'>,
  type: TransferType,
|};


export type MutationCreateClientArgs = {|
  client: CreateClientInput,
|};


export type MutationUpdateClientArgs = {|
  client: UpdateClientInput,
|};


export type MutationDeleteClientArgs = {|
  id: $ElementType<Scalars, 'String'>,
|};


export type MutationUpdateTaxYearSettingsArgs = {|
  taxYearSettings: Array<TaxYearSettingInput>,
|};


export type MutationCreateTransferArgs = {|
  transfer: CreateTransferInput,
|};


export type MutationUpdateTransferArgs = {|
  transfer: UpdateTransferInput,
|};


export type MutationConfirmTransferArgs = {|
  authorizationToken: $ElementType<Scalars, 'String'>,
  confirmationId: $ElementType<Scalars, 'String'>,
|};


export type MutationCreateTransfersArgs = {|
  transfers: Array<CreateSepaTransferInput>,
|};


export type MutationConfirmTransfersArgs = {|
  authorizationToken: $ElementType<Scalars, 'String'>,
  confirmationId: $ElementType<Scalars, 'String'>,
|};


export type MutationAuthorizeChangeRequestArgs = {|
  deviceId: $ElementType<Scalars, 'String'>,
  changeRequestId: $ElementType<Scalars, 'String'>,
|};


export type MutationConfirmChangeRequestArgs = {|
  deviceId: $ElementType<Scalars, 'String'>,
  signature: $ElementType<Scalars, 'String'>,
  changeRequestId: $ElementType<Scalars, 'String'>,
|};


export type MutationCreateCardArgs = {|
  type: CardType,
  cardHolderRepresentation?: ?$ElementType<Scalars, 'String'>,
|};


export type MutationActivateCardArgs = {|
  verificationToken: $ElementType<Scalars, 'String'>,
  id: $ElementType<Scalars, 'String'>,
|};


export type MutationAddGooglePayCardTokenArgs = {|
  tokenRefId: $ElementType<Scalars, 'String'>,
  walletId: $ElementType<Scalars, 'String'>,
  id: $ElementType<Scalars, 'String'>,
|};


export type MutationCardPushProvisioningArgs = {|
  android?: ?PushProvisioningAndroidInput,
  ios?: ?PushProvisioningIosInput,
  cardId: $ElementType<Scalars, 'String'>,
|};


export type MutationDeleteGooglePayCardTokenArgs = {|
  tokenRefId: $ElementType<Scalars, 'String'>,
  walletId: $ElementType<Scalars, 'String'>,
  id: $ElementType<Scalars, 'String'>,
|};


export type MutationUpdateCardSettingsArgs = {|
  settings: CardSettingsInput,
  id: $ElementType<Scalars, 'String'>,
|};


export type MutationChangeCardStatusArgs = {|
  id: $ElementType<Scalars, 'String'>,
  action: CardAction,
|};


export type MutationChangeCardPinArgs = {|
  pin: $ElementType<Scalars, 'String'>,
  id: $ElementType<Scalars, 'String'>,
|};


export type MutationConfirmChangeCardPinArgs = {|
  authorizationToken: $ElementType<Scalars, 'String'>,
  confirmationId: $ElementType<Scalars, 'String'>,
  id: $ElementType<Scalars, 'String'>,
|};


export type MutationReplaceCardArgs = {|
  id: $ElementType<Scalars, 'String'>,
|};


export type MutationReorderCardArgs = {|
  id: $ElementType<Scalars, 'String'>,
|};


export type MutationSetCardHolderRepresentationArgs = {|
  cardHolderRepresentation: $ElementType<Scalars, 'String'>,
|};


export type MutationVirtualCardDetailsArgs = {|
  args: VirtualCardDetailsArgs,
  id: $ElementType<Scalars, 'String'>,
|};


export type MutationUpdateTransactionArgs = {|
  id: $ElementType<Scalars, 'String'>,
  category?: ?TransactionCategory,
  userSelectedBookingDate?: ?$ElementType<Scalars, 'DateTime'>,
  personalNote?: ?$ElementType<Scalars, 'String'>,
|};


export type MutationUpdateOverdraftArgs = {|
  offeredScreenShown?: ?$ElementType<Scalars, 'Boolean'>,
  rejectionScreenShown?: ?$ElementType<Scalars, 'Boolean'>,
|};


export type MutationCreateTransactionSplitsArgs = {|
  splits: Array<CreateTransactionSplitsInput>,
  transactionId: $ElementType<Scalars, 'ID'>,
|};


export type MutationUpdateTransactionSplitsArgs = {|
  splits: Array<UpdateTransactionSplitsInput>,
  transactionId: $ElementType<Scalars, 'ID'>,
|};


export type MutationDeleteTransactionSplitsArgs = {|
  transactionId: $ElementType<Scalars, 'ID'>,
|};


export type MutationSubscribeToPlanArgs = {|
  couponCode?: ?$ElementType<Scalars, 'String'>,
  type: PurchaseType,
|};


export type MutationUpdateSubscriptionPlanArgs = {|
  couponCode?: ?$ElementType<Scalars, 'String'>,
  newPlan: PurchaseType,
|};


export type MutationDismissBannerArgs = {|
  name: BannerName,
|};


export type MutationConnectIntegrationArgs = {|
  type: IntegrationType,
  authorizationData: $ElementType<Scalars, 'String'>,
|};


export type MutationUpdateUserTaxDetailsArgs = {|
  payload: UserTaxDetailsInput,
|};


export type MutationUpdateDocumentArgs = {|
  id: $ElementType<Scalars, 'ID'>,
  name?: ?$ElementType<Scalars, 'String'>,
|};


export type MutationDeleteDocumentArgs = {|
  id: $ElementType<Scalars, 'ID'>,
|};


export type MutationUpdateUserSignupInformationArgs = {|
  payload: UserUpdateInput,
|};


export type MutationCreateUserEmailAliasArgs = {|
  hash: $ElementType<Scalars, 'String'>,
  alias: $ElementType<Scalars, 'String'>,
|};


export type MutationCreateUserArgs = {|
  payload: CreateUserInput,
|};


export type MutationUpdateUserNotificationsArgs = {|
  active: $ElementType<Scalars, 'Boolean'>,
  type: NotificationType,
|};


export type MutationRefundDirectDebitArgs = {|
  transactionId: $ElementType<Scalars, 'String'>,
|};


export type MutationCreateReviewArgs = {|
  platform: ReviewTriggerPlatform,
  triggerName: ReviewTriggerName,
|};


export type MutationUpdateReviewArgs = {|
  status: UserReviewStatus,
  reviewId: $ElementType<Scalars, 'Int'>,
|};


export type MutationUpdateInvoiceSettingsArgs = {|
  payload: InvoiceSettingsInput,
|};


export type MutationCreateInvoiceLogoArgs = {|
  filetype: $ElementType<Scalars, 'String'>,
|};


export type MutationSignPoaArgs = {|
  dependents?: ?Array<UserDependentInput>,
  signature: $ElementType<Scalars, 'String'>,
|};


export type MutationUpdateInvoiceCustomerArgs = {|
  payload: InvoiceCustomerInput,
|};


export type MutationUpdateInvoiceArgs = {|
  payload: InvoiceInput,
|};


export type MutationDeleteInvoiceArgs = {|
  id: $ElementType<Scalars, 'ID'>,
|};


export type MutationDuplicateInvoiceArgs = {|
  id: $ElementType<Scalars, 'ID'>,
|};


export type MutationUpsertProductsArgs = {|
  payload: Array<UserProductInput>,
|};


export type MutationCategorizeTransactionForDeclarationArgs = {|
  id: $ElementType<Scalars, 'ID'>,
  categoryCode?: ?$ElementType<Scalars, 'String'>,
  category?: ?TransactionCategory,
  date?: ?$ElementType<Scalars, 'String'>,
  isSplit?: ?$ElementType<Scalars, 'Boolean'>,
|};


export type MutationSubmitDeclarationArgs = {|
  year: $ElementType<Scalars, 'Int'>,
  period: $ElementType<Scalars, 'String'>,
|};

export type MutationResult = {|
  __typename?: 'MutationResult',
  success: $ElementType<Scalars, 'Boolean'>,
|};

export const NationalityValues = Object.freeze({
  De: 'DE',
  Ad: 'AD',
  Ae: 'AE',
  Af: 'AF',
  Ag: 'AG',
  Ai: 'AI',
  Al: 'AL',
  Am: 'AM',
  Ao: 'AO',
  Aq: 'AQ',
  Ar: 'AR',
  As: 'AS',
  At: 'AT',
  Au: 'AU',
  Aw: 'AW',
  Ax: 'AX',
  Az: 'AZ',
  Ba: 'BA',
  Bb: 'BB',
  Bd: 'BD',
  Be: 'BE',
  Bf: 'BF',
  Bg: 'BG',
  Bh: 'BH',
  Bi: 'BI',
  Bj: 'BJ',
  Bl: 'BL',
  Bm: 'BM',
  Bn: 'BN',
  Bo: 'BO',
  Br: 'BR',
  Bs: 'BS',
  Bt: 'BT',
  Bv: 'BV',
  Bw: 'BW',
  By: 'BY',
  Bz: 'BZ',
  Ca: 'CA',
  Cc: 'CC',
  Cd: 'CD',
  Cf: 'CF',
  Cg: 'CG',
  Ch: 'CH',
  Ci: 'CI',
  Ck: 'CK',
  Cl: 'CL',
  Cm: 'CM',
  Cn: 'CN',
  Co: 'CO',
  Cr: 'CR',
  Cu: 'CU',
  Cv: 'CV',
  Cw: 'CW',
  Cx: 'CX',
  Cy: 'CY',
  Cz: 'CZ',
  Dj: 'DJ',
  Dk: 'DK',
  Dm: 'DM',
  Do: 'DO',
  Dz: 'DZ',
  Ec: 'EC',
  Ee: 'EE',
  Eg: 'EG',
  Eh: 'EH',
  Er: 'ER',
  Es: 'ES',
  Et: 'ET',
  Fi: 'FI',
  Fj: 'FJ',
  Fk: 'FK',
  Fm: 'FM',
  Fo: 'FO',
  Fr: 'FR',
  Ga: 'GA',
  Gb: 'GB',
  Gd: 'GD',
  Ge: 'GE',
  Gf: 'GF',
  Gg: 'GG',
  Gh: 'GH',
  Gi: 'GI',
  Gl: 'GL',
  Gm: 'GM',
  Gn: 'GN',
  Gp: 'GP',
  Gq: 'GQ',
  Gr: 'GR',
  Gs: 'GS',
  Gt: 'GT',
  Gu: 'GU',
  Gw: 'GW',
  Gy: 'GY',
  Hk: 'HK',
  Hm: 'HM',
  Hn: 'HN',
  Hr: 'HR',
  Ht: 'HT',
  Hu: 'HU',
  Id: 'ID',
  Ie: 'IE',
  Il: 'IL',
  Im: 'IM',
  In: 'IN',
  Io: 'IO',
  Iq: 'IQ',
  Ir: 'IR',
  Is: 'IS',
  It: 'IT',
  Je: 'JE',
  Jm: 'JM',
  Jo: 'JO',
  Jp: 'JP',
  Ke: 'KE',
  Kg: 'KG',
  Kh: 'KH',
  Ki: 'KI',
  Km: 'KM',
  Kn: 'KN',
  Kp: 'KP',
  Kr: 'KR',
  Kw: 'KW',
  Ky: 'KY',
  Kz: 'KZ',
  La: 'LA',
  Lb: 'LB',
  Lc: 'LC',
  Li: 'LI',
  Lk: 'LK',
  Lr: 'LR',
  Ls: 'LS',
  Lt: 'LT',
  Lu: 'LU',
  Lv: 'LV',
  Ly: 'LY',
  Ma: 'MA',
  Mc: 'MC',
  Md: 'MD',
  Me: 'ME',
  Mf: 'MF',
  Mg: 'MG',
  Mh: 'MH',
  Mk: 'MK',
  Ml: 'ML',
  Mm: 'MM',
  Mn: 'MN',
  Mo: 'MO',
  Mp: 'MP',
  Mq: 'MQ',
  Mr: 'MR',
  Ms: 'MS',
  Mt: 'MT',
  Mu: 'MU',
  Mv: 'MV',
  Mw: 'MW',
  Mx: 'MX',
  My: 'MY',
  Mz: 'MZ',
  Na: 'NA',
  Nc: 'NC',
  Ne: 'NE',
  Nf: 'NF',
  Ng: 'NG',
  Ni: 'NI',
  Nl: 'NL',
  No: 'NO',
  Np: 'NP',
  Nr: 'NR',
  Nu: 'NU',
  Nz: 'NZ',
  Om: 'OM',
  Pa: 'PA',
  Pe: 'PE',
  Pf: 'PF',
  Pg: 'PG',
  Ph: 'PH',
  Pk: 'PK',
  Pl: 'PL',
  Pm: 'PM',
  Pn: 'PN',
  Pr: 'PR',
  Ps: 'PS',
  Pt: 'PT',
  Pw: 'PW',
  Py: 'PY',
  Qa: 'QA',
  Re: 'RE',
  Ro: 'RO',
  Rs: 'RS',
  Ru: 'RU',
  Rw: 'RW',
  Sa: 'SA',
  Sb: 'SB',
  Sc: 'SC',
  Sd: 'SD',
  Se: 'SE',
  Sg: 'SG',
  Si: 'SI',
  Sj: 'SJ',
  Sk: 'SK',
  Sl: 'SL',
  Sm: 'SM',
  Sn: 'SN',
  So: 'SO',
  Sr: 'SR',
  Ss: 'SS',
  St: 'ST',
  Sv: 'SV',
  Sx: 'SX',
  Sy: 'SY',
  Sz: 'SZ',
  Tc: 'TC',
  Td: 'TD',
  Tf: 'TF',
  Tg: 'TG',
  Th: 'TH',
  Tj: 'TJ',
  Tk: 'TK',
  Tl: 'TL',
  Tm: 'TM',
  Tn: 'TN',
  To: 'TO',
  Tr: 'TR',
  Tt: 'TT',
  Tv: 'TV',
  Tw: 'TW',
  Tz: 'TZ',
  Ua: 'UA',
  Ug: 'UG',
  Um: 'UM',
  Us: 'US',
  Uy: 'UY',
  Uz: 'UZ',
  Va: 'VA',
  Vc: 'VC',
  Ve: 'VE',
  Vg: 'VG',
  Vi: 'VI',
  Vn: 'VN',
  Vu: 'VU',
  Wf: 'WF',
  Ws: 'WS',
  Xk: 'XK',
  Ye: 'YE',
  Yt: 'YT',
  Za: 'ZA',
  Zm: 'ZM',
  Zw: 'ZW'
});


export type Nationality = $Values<typeof NationalityValues>;

export type Notification = {|
  __typename?: 'Notification',
  type: NotificationType,
  active: $ElementType<Scalars, 'Boolean'>,
|};

export const NotificationTypeValues = Object.freeze({
  CardTransactions: 'CARD_TRANSACTIONS',
  IncomingTransactions: 'INCOMING_TRANSACTIONS',
  DirectDebitTransactions: 'DIRECT_DEBIT_TRANSACTIONS',
  AtmWithdrawalTransactions: 'ATM_WITHDRAWAL_TRANSACTIONS',
  Transactions: 'TRANSACTIONS',
  Statements: 'STATEMENTS',
  ProductInfo: 'PRODUCT_INFO',
  Tax: 'TAX',
  ReceiptScanning: 'RECEIPT_SCANNING',
  All: 'ALL'
});


export type NotificationType = $Values<typeof NotificationTypeValues>;

export type Overdraft = {|
  __typename?: 'Overdraft',
  id: $ElementType<Scalars, 'String'>,
  /** Overdraft status */
  status: OverdraftApplicationStatus,
  /** Available overdraft limit */
  limit?: ?$ElementType<Scalars, 'Int'>,
  /** Overdraft request date */
  requestedAt: $ElementType<Scalars, 'DateTime'>,
  /** Indicates if offered screen for overdraft was shown */
  offeredScreenShown: $ElementType<Scalars, 'Boolean'>,
  /** Indicates if rejection screen for overdraft was shown */
  rejectionScreenShown: $ElementType<Scalars, 'Boolean'>,
|};

export const OverdraftApplicationStatusValues = Object.freeze({
  Created: 'CREATED',
  InitialScoringPending: 'INITIAL_SCORING_PENDING',
  AccountSnapshotPending: 'ACCOUNT_SNAPSHOT_PENDING',
  AccountSnapshotVerificationPending: 'ACCOUNT_SNAPSHOT_VERIFICATION_PENDING',
  Offered: 'OFFERED',
  Rejected: 'REJECTED',
  OverdraftCreated: 'OVERDRAFT_CREATED',
  Expired: 'EXPIRED'
});


export type OverdraftApplicationStatus = $Values<typeof OverdraftApplicationStatusValues>;

export type PageInfo = {|
  __typename?: 'PageInfo',
  startCursor?: ?$ElementType<Scalars, 'String'>,
  endCursor?: ?$ElementType<Scalars, 'String'>,
  hasNextPage: $ElementType<Scalars, 'Boolean'>,
  hasPreviousPage: $ElementType<Scalars, 'Boolean'>,
|};

export const PaymentFrequencyValues = Object.freeze({
  Monthly: 'MONTHLY',
  Quarterly: 'QUARTERLY',
  Yearly: 'YEARLY',
  None: 'NONE'
});


export type PaymentFrequency = $Values<typeof PaymentFrequencyValues>;

export type PendingTransactionVerification = {|
  __typename?: 'PendingTransactionVerification',
  /** Transaction merchant name */
  name: $ElementType<Scalars, 'String'>,
  /** Transaction amount */
  amount: $ElementType<Scalars, 'String'>,
  /** When verification gets expired */
  expiresAt: $ElementType<Scalars, 'String'>,
  /** Change request id to decline verification */
  declineChangeRequestId: $ElementType<Scalars, 'String'>,
  /** Change request id to authenticate verification */
  authenticateChangeRequestId: $ElementType<Scalars, 'String'>,
|};

export const PermanentExtensionStatusValues = Object.freeze({
  DoesHave: 'DOES_HAVE',
  DoesNotHave: 'DOES_NOT_HAVE',
  DoesNotKnow: 'DOES_NOT_KNOW'
});


export type PermanentExtensionStatus = $Values<typeof PermanentExtensionStatusValues>;

export const PlatformValues = Object.freeze({
  Ios: 'IOS',
  Android: 'ANDROID',
  Web: 'WEB'
});


export type Platform = $Values<typeof PlatformValues>;

export type Product = {|
  __typename?: 'Product',
  id: $ElementType<Scalars, 'ID'>,
  description?: ?$ElementType<Scalars, 'String'>,
  price?: ?$ElementType<Scalars, 'Float'>,
  vat?: ?$ElementType<Scalars, 'String'>,
|};

export type PublicMutationResult = {|
  __typename?: 'PublicMutationResult',
  success: $ElementType<Scalars, 'Boolean'>,
|};

export const PurchaseStateValues = Object.freeze({
  Processed: 'PROCESSED',
  Pending: 'PENDING'
});


export type PurchaseState = $Values<typeof PurchaseStateValues>;

export const PurchaseTypeValues = Object.freeze({
  BasicInitial: 'BASIC_INITIAL',
  Basic: 'BASIC',
  Premium: 'PREMIUM',
  Card: 'CARD',
  Lexoffice: 'LEXOFFICE',
  Kontax: 'KONTAX',
  KontaxSb: 'KONTAX_SB',
  KontaxPending: 'KONTAX_PENDING',
  Accounting: 'ACCOUNTING'
});


export type PurchaseType = $Values<typeof PurchaseTypeValues>;

export type PushProvisioningAndroidInput = {|
  /** Stable identifier for a physical Android device Google refers to this atribute as a Stable hardware ID in their SDK documentation the method getStableHardwareId describes how you can retrieve this value. */
  deviceId?: ?$ElementType<Scalars, 'String'>,
  /** Unique 24-byte identifier for each instance of a [Android user, Google account] pair wallet. ID is computed as a keyed hash of the Android user ID and the Google account ID. The key to this hash lives on Google servers, meaning the wallet ID is created during user setup as an RPC. */
  walletAccountId?: ?$ElementType<Scalars, 'String'>,
|};

export type PushProvisioningIosInput = {|
  /** A one-time-use nonce in Base64 encoded format provided by Apple */
  nonce?: ?$ElementType<Scalars, 'String'>,
  /** Nonce signature in Base64 encoded format provided by Apple */
  nonceSignature?: ?$ElementType<Scalars, 'String'>,
  /** An array of leaf and sub-CA certificates in Base64 encoded format provided by Apple. Each object contains a DER encoded X.509 certificate, with the leaf first and followed by sub-CA */
  certificates?: ?Array<$ElementType<Scalars, 'String'>>,
|};

export type PushProvisioningOutput = {|
  __typename?: 'PushProvisioningOutput',
  walletPayload?: ?$ElementType<Scalars, 'String'>,
  activationData?: ?$ElementType<Scalars, 'String'>,
  encryptedPassData?: ?$ElementType<Scalars, 'String'>,
  ephemeralPublicKey?: ?$ElementType<Scalars, 'String'>,
|};

export type Query = {|
  __typename?: 'Query',
  /** The current user information */
  viewer?: ?User,
  status: SystemStatus,
  /** Get all released generic features, that are needed before user creation */
  genericFeatures: Array<GenericFeature>,
|};

export type RecurlyAccount = {|
  __typename?: 'RecurlyAccount',
  recurlyAccountId: $ElementType<Scalars, 'String'>,
  balance: $ElementType<Scalars, 'Float'>,
  pastDue: $ElementType<Scalars, 'Boolean'>,
  pastDueSince?: ?$ElementType<Scalars, 'DateTime'>,
  accountManagementUrl: $ElementType<Scalars, 'String'>,
|};

export type ReferralDetails = {|
  __typename?: 'ReferralDetails',
  code?: ?$ElementType<Scalars, 'String'>,
  link?: ?$ElementType<Scalars, 'String'>,
  /** Amount in euros granted to user and their referee */
  bonusAmount: $ElementType<Scalars, 'Int'>,
  copy: $ElementType<Scalars, 'String'>,
|};

export const ReviewTriggerNameValues = Object.freeze({
  Googlepay: 'GOOGLEPAY',
  OverdraftOffered: 'OVERDRAFT_OFFERED',
  VirtualCardActivated: 'VIRTUAL_CARD_ACTIVATED',
  PhysicalCardActivated: 'PHYSICAL_CARD_ACTIVATED',
  OutgoingTransactions: 'OUTGOING_TRANSACTIONS',
  ReceiptsScanned: 'RECEIPTS_SCANNED',
  BatchTransfers: 'BATCH_TRANSFERS',
  SettingsButtonClicked: 'SETTINGS_BUTTON_CLICKED'
});


export type ReviewTriggerName = $Values<typeof ReviewTriggerNameValues>;

export const ReviewTriggerPlatformValues = Object.freeze({
  Mobile: 'MOBILE',
  Webapp: 'WEBAPP'
});


export type ReviewTriggerPlatform = $Values<typeof ReviewTriggerPlatformValues>;

export const ScopeTypeValues = Object.freeze({
  Offline: 'OFFLINE',
  Accounts: 'ACCOUNTS',
  Users: 'USERS',
  Transactions: 'TRANSACTIONS',
  Transfers: 'TRANSFERS',
  Subscriptions: 'SUBSCRIPTIONS',
  Statements: 'STATEMENTS',
  Admin: 'ADMIN',
  Clients: 'CLIENTS',
  Overdraft: 'OVERDRAFT',
  Banners: 'BANNERS',
  Signup: 'SIGNUP',
  CardFraud: 'CARD_FRAUD',
  ChangeRequest: 'CHANGE_REQUEST'
});


export type ScopeType = $Values<typeof ScopeTypeValues>;

export const ScreeningStatusValues = Object.freeze({
  NotScreened: 'NOT_SCREENED',
  PotentialMatch: 'POTENTIAL_MATCH',
  ScreenedAccepted: 'SCREENED_ACCEPTED',
  ScreenedDeclined: 'SCREENED_DECLINED'
});


export type ScreeningStatus = $Values<typeof ScreeningStatusValues>;

export type SepaTransfer = {|
  __typename?: 'SepaTransfer',
  /** The status of the SEPA Transfer */
  status: SepaTransferStatus,
  /** The amount of the SEPA Transfer in cents */
  amount: $ElementType<Scalars, 'Int'>,
  /** The purpose of the SEPA Transfer - 140 max characters */
  purpose?: ?$ElementType<Scalars, 'String'>,
  id: $ElementType<Scalars, 'String'>,
  /** The name of the SEPA Transfer recipient */
  recipient: $ElementType<Scalars, 'String'>,
  /** The IBAN of the SEPA Transfer recipient */
  iban: $ElementType<Scalars, 'String'>,
  /** The end to end ID of the SEPA Transfer */
  e2eId?: ?$ElementType<Scalars, 'String'>,
  /** List of uploaded Asset files for this transfer */
  assets: Array<Asset>,
|};

export const SepaTransferStatusValues = Object.freeze({
  Authorized: 'AUTHORIZED',
  Confirmed: 'CONFIRMED',
  Booked: 'BOOKED'
});


export type SepaTransferStatus = $Values<typeof SepaTransferStatusValues>;

export const StandingOrderReoccurrenceTypeValues = Object.freeze({
  Monthly: 'MONTHLY',
  Quarterly: 'QUARTERLY',
  EverySixMonths: 'EVERY_SIX_MONTHS',
  Annually: 'ANNUALLY'
});


export type StandingOrderReoccurrenceType = $Values<typeof StandingOrderReoccurrenceTypeValues>;

export const StatusValues = Object.freeze({
  Error: 'ERROR'
});


export type Status = $Values<typeof StatusValues>;

export type Subscription = {|
  __typename?: 'Subscription',
  newTransaction: Transaction,
|};

export type SubscriptionFeature = {|
  __typename?: 'SubscriptionFeature',
  title: $ElementType<Scalars, 'String'>,
  icon?: ?Icon,
|};

export type SubscriptionFeatureGroup = {|
  __typename?: 'SubscriptionFeatureGroup',
  title?: ?$ElementType<Scalars, 'String'>,
  icon?: ?Icon,
  features: Array<SubscriptionFeature>,
|};

export type SubscriptionPlan = {|
  __typename?: 'SubscriptionPlan',
  type: PurchaseType,
  subtitle?: ?$ElementType<Scalars, 'String'>,
  fee: Money,
  title: $ElementType<Scalars, 'String'>,
  description: $ElementType<Scalars, 'String'>,
  button: $ElementType<Scalars, 'String'>,
  featuresToggleLabel?: ?$ElementType<Scalars, 'String'>,
  featureGroups: Array<SubscriptionFeatureGroup>,
|};

export type SubscriptionPlansResponse = {|
  __typename?: 'SubscriptionPlansResponse',
  plans: Array<SubscriptionPlan>,
  couponCode?: ?$ElementType<Scalars, 'String'>,
|};

export type SystemStatus = {|
  __typename?: 'SystemStatus',
  type?: ?Status,
  message?: ?$ElementType<Scalars, 'String'>,
|};

export const TaxPaymentFrequencyValues = Object.freeze({
  Quarterly: 'QUARTERLY'
});


export type TaxPaymentFrequency = $Values<typeof TaxPaymentFrequencyValues>;

export type TaxYearSetting = {|
  __typename?: 'TaxYearSetting',
  /** Tax year the individual settings apply to */
  year: $ElementType<Scalars, 'Int'>,
  /** Tax rate that should be applied in the corresponding year */
  taxRate?: ?$ElementType<Scalars, 'Int'>,
  /** Flag if the corresponding year should be excluded from the tax calculations completely */
  excluded?: ?$ElementType<Scalars, 'Boolean'>,
|};

export type TaxYearSettingInput = {|
  /** Tax year the individual settings apply to */
  year: $ElementType<Scalars, 'Int'>,
  /** Tax rate that should be applied in the corresponding year */
  taxRate?: ?$ElementType<Scalars, 'Int'>,
  /** Flag if the corresponding year should be excluded from the tax calculations completely */
  excluded?: ?$ElementType<Scalars, 'Boolean'>,
|};

export const ThreeStateAnswerValues = Object.freeze({
  Yes: 'YES',
  No: 'NO',
  NotSure: 'NOT_SURE'
});


export type ThreeStateAnswer = $Values<typeof ThreeStateAnswerValues>;

export type Transaction = {|
  __typename?: 'Transaction',
  id: $ElementType<Scalars, 'ID'>,
  /** The amount of the transaction in cents */
  amount: $ElementType<Scalars, 'Int'>,
  iban?: ?$ElementType<Scalars, 'String'>,
  type: TransactionProjectionType,
  /** The date at which the transaction was processed and the amount deducted from the user's account */
  valutaDate?: ?$ElementType<Scalars, 'DateTime'>,
  e2eId?: ?$ElementType<Scalars, 'String'>,
  mandateNumber?: ?$ElementType<Scalars, 'String'>,
  createdAt: $ElementType<Scalars, 'DateTime'>,
  merchantCountryCode?: ?$ElementType<Scalars, 'String'>,
  merchantCategoryCode?: ?$ElementType<Scalars, 'String'>,
  fees: Array<TransactionFee>,
  /** Metadata of separate pseudo-transactions created when splitting the parent transaction */
  splits: Array<TransactionSplit>,
  /** List of uploaded Asset files for this transaction */
  assets: Array<TransactionAsset>,
  /** The date at which the transaction was booked (created) */
  bookingDate: $ElementType<Scalars, 'DateTime'>,
  directDebitFees: Array<DirectDebitFee>,
  name?: ?$ElementType<Scalars, 'String'>,
  paymentMethod: $ElementType<Scalars, 'String'>,
  category?: ?TransactionCategory,
  categorizationType?: ?CategorizationType,
  /** When a transaction corresponds to a tax or vat payment, the user may specify at which date it should be considered booked */
  userSelectedBookingDate?: ?$ElementType<Scalars, 'DateTime'>,
  personalNote?: ?$ElementType<Scalars, 'String'>,
  predictedCategory?: ?TransactionCategory,
  /** Date predicted for tax/vat payment/refund predicted category */
  predictedUserSelectedBookingDate?: ?$ElementType<Scalars, 'DateTime'>,
  purpose?: ?$ElementType<Scalars, 'String'>,
  documentNumber?: ?$ElementType<Scalars, 'String'>,
  documentPreviewUrl?: ?$ElementType<Scalars, 'String'>,
  documentDownloadUrl?: ?$ElementType<Scalars, 'String'>,
  documentType?: ?DocumentType,
  foreignCurrency?: ?$ElementType<Scalars, 'String'>,
  originalAmount?: ?$ElementType<Scalars, 'Int'>,
  categoryCode?: ?$ElementType<Scalars, 'String'>,
  canBeRecategorized: $ElementType<Scalars, 'Boolean'>,
  categoryCodeTranslation?: ?$ElementType<Scalars, 'String'>,
  recurlyInvoiceNumber?: ?$ElementType<Scalars, 'String'>,
  /** List Assets for a transaction */
  transactionAssets: Array<Asset>,
  /** View a single Asset for a transaction */
  asset?: ?TransactionAsset,
  /** View a single Asset for a transaction */
  transactionAsset?: ?Asset,
|};


export type TransactionAssetArgs = {|
  assetId: $ElementType<Scalars, 'ID'>,
|};


export type TransactionTransactionAssetArgs = {|
  assetId: $ElementType<Scalars, 'ID'>,
|};

export type TransactionAsset = {|
  __typename?: 'TransactionAsset',
  id: $ElementType<Scalars, 'ID'>,
  name: $ElementType<Scalars, 'String'>,
  filetype: $ElementType<Scalars, 'String'>,
  assetableId: $ElementType<Scalars, 'ID'>,
  path: $ElementType<Scalars, 'String'>,
  thumbnail: $ElementType<Scalars, 'String'>,
  fullsize: $ElementType<Scalars, 'String'>,
|};

export const TransactionCategoryValues = Object.freeze({
  Private: 'PRIVATE',
  Vat: 'VAT',
  Vat_0: 'VAT_0',
  Vat_5: 'VAT_5',
  Vat_7: 'VAT_7',
  Vat_16: 'VAT_16',
  Vat_19: 'VAT_19',
  TaxPayment: 'TAX_PAYMENT',
  VatPayment: 'VAT_PAYMENT',
  TaxRefund: 'TAX_REFUND',
  VatRefund: 'VAT_REFUND',
  VatSaving: 'VAT_SAVING',
  TaxSaving: 'TAX_SAVING',
  ReverseCharge: 'REVERSE_CHARGE'
});


export type TransactionCategory = $Values<typeof TransactionCategoryValues>;

export type TransactionCondition = {|
  operator?: ?BaseOperator,
  amount_lt?: ?$ElementType<Scalars, 'Int'>,
  amount_gt?: ?$ElementType<Scalars, 'Int'>,
  amount_gte?: ?$ElementType<Scalars, 'Int'>,
  amount_lte?: ?$ElementType<Scalars, 'Int'>,
  amount_eq?: ?$ElementType<Scalars, 'Int'>,
  amount_ne?: ?$ElementType<Scalars, 'Int'>,
  amount_in?: ?Array<$ElementType<Scalars, 'Int'>>,
  iban_eq?: ?$ElementType<Scalars, 'String'>,
  iban_ne?: ?$ElementType<Scalars, 'String'>,
  iban_like?: ?$ElementType<Scalars, 'String'>,
  iban_likeAny?: ?Array<$ElementType<Scalars, 'String'>>,
  iban_in?: ?Array<$ElementType<Scalars, 'String'>>,
  valutaDate_eq?: ?$ElementType<Scalars, 'DateTime'>,
  valutaDate_ne?: ?$ElementType<Scalars, 'DateTime'>,
  valutaDate_gt?: ?$ElementType<Scalars, 'DateTime'>,
  valutaDate_lt?: ?$ElementType<Scalars, 'DateTime'>,
  valutaDate_gte?: ?$ElementType<Scalars, 'DateTime'>,
  valutaDate_lte?: ?$ElementType<Scalars, 'DateTime'>,
  assets_exist?: ?$ElementType<Scalars, 'Boolean'>,
  vatAssets_exist?: ?$ElementType<Scalars, 'Boolean'>,
  bookingDate_eq?: ?$ElementType<Scalars, 'DateTime'>,
  bookingDate_ne?: ?$ElementType<Scalars, 'DateTime'>,
  bookingDate_gt?: ?$ElementType<Scalars, 'DateTime'>,
  bookingDate_lt?: ?$ElementType<Scalars, 'DateTime'>,
  bookingDate_gte?: ?$ElementType<Scalars, 'DateTime'>,
  bookingDate_lte?: ?$ElementType<Scalars, 'DateTime'>,
  name_eq?: ?$ElementType<Scalars, 'String'>,
  name_ne?: ?$ElementType<Scalars, 'String'>,
  name_like?: ?$ElementType<Scalars, 'String'>,
  name_likeAny?: ?Array<$ElementType<Scalars, 'String'>>,
  name_in?: ?Array<$ElementType<Scalars, 'String'>>,
  purpose_eq?: ?$ElementType<Scalars, 'String'>,
  purpose_ne?: ?$ElementType<Scalars, 'String'>,
  purpose_like?: ?$ElementType<Scalars, 'String'>,
  purpose_likeAny?: ?Array<$ElementType<Scalars, 'String'>>,
|};

export type TransactionFee = {|
  __typename?: 'TransactionFee',
  type: TransactionFeeType,
  status: TransactionFeeStatus,
  unitAmount?: ?$ElementType<Scalars, 'Int'>,
  usedAt?: ?$ElementType<Scalars, 'DateTime'>,
|};

export const TransactionFeeStatusValues = Object.freeze({
  Created: 'CREATED',
  Charged: 'CHARGED',
  Refunded: 'REFUNDED',
  Cancelled: 'CANCELLED',
  RefundInitiated: 'REFUND_INITIATED'
});


export type TransactionFeeStatus = $Values<typeof TransactionFeeStatusValues>;

export const TransactionFeeTypeValues = Object.freeze({
  Atm: 'ATM',
  ForeignTransaction: 'FOREIGN_TRANSACTION',
  DirectDebitReturn: 'DIRECT_DEBIT_RETURN',
  SecondReminderEmail: 'SECOND_REMINDER_EMAIL',
  CardReplacement: 'CARD_REPLACEMENT'
});


export type TransactionFeeType = $Values<typeof TransactionFeeTypeValues>;

export type TransactionFilter = {|
  operator?: ?BaseOperator,
  amount_lt?: ?$ElementType<Scalars, 'Int'>,
  amount_gt?: ?$ElementType<Scalars, 'Int'>,
  amount_gte?: ?$ElementType<Scalars, 'Int'>,
  amount_lte?: ?$ElementType<Scalars, 'Int'>,
  amount_eq?: ?$ElementType<Scalars, 'Int'>,
  amount_ne?: ?$ElementType<Scalars, 'Int'>,
  amount_in?: ?Array<$ElementType<Scalars, 'Int'>>,
  iban_eq?: ?$ElementType<Scalars, 'String'>,
  iban_ne?: ?$ElementType<Scalars, 'String'>,
  iban_like?: ?$ElementType<Scalars, 'String'>,
  iban_likeAny?: ?Array<$ElementType<Scalars, 'String'>>,
  iban_in?: ?Array<$ElementType<Scalars, 'String'>>,
  valutaDate_eq?: ?$ElementType<Scalars, 'DateTime'>,
  valutaDate_ne?: ?$ElementType<Scalars, 'DateTime'>,
  valutaDate_gt?: ?$ElementType<Scalars, 'DateTime'>,
  valutaDate_lt?: ?$ElementType<Scalars, 'DateTime'>,
  valutaDate_gte?: ?$ElementType<Scalars, 'DateTime'>,
  valutaDate_lte?: ?$ElementType<Scalars, 'DateTime'>,
  assets_exist?: ?$ElementType<Scalars, 'Boolean'>,
  vatAssets_exist?: ?$ElementType<Scalars, 'Boolean'>,
  bookingDate_eq?: ?$ElementType<Scalars, 'DateTime'>,
  bookingDate_ne?: ?$ElementType<Scalars, 'DateTime'>,
  bookingDate_gt?: ?$ElementType<Scalars, 'DateTime'>,
  bookingDate_lt?: ?$ElementType<Scalars, 'DateTime'>,
  bookingDate_gte?: ?$ElementType<Scalars, 'DateTime'>,
  bookingDate_lte?: ?$ElementType<Scalars, 'DateTime'>,
  name_eq?: ?$ElementType<Scalars, 'String'>,
  name_ne?: ?$ElementType<Scalars, 'String'>,
  name_like?: ?$ElementType<Scalars, 'String'>,
  name_likeAny?: ?Array<$ElementType<Scalars, 'String'>>,
  name_in?: ?Array<$ElementType<Scalars, 'String'>>,
  purpose_eq?: ?$ElementType<Scalars, 'String'>,
  purpose_ne?: ?$ElementType<Scalars, 'String'>,
  purpose_like?: ?$ElementType<Scalars, 'String'>,
  purpose_likeAny?: ?Array<$ElementType<Scalars, 'String'>>,
  conditions?: ?Array<TransactionCondition>,
|};

export type TransactionForAccountingView = {|
  __typename?: 'TransactionForAccountingView',
  id: $ElementType<Scalars, 'ID'>,
  amount: $ElementType<Scalars, 'Int'>,
  name: $ElementType<Scalars, 'String'>,
  purpose?: ?$ElementType<Scalars, 'String'>,
  valutaDate: $ElementType<Scalars, 'DateTime'>,
  selectedBookingDate?: ?$ElementType<Scalars, 'DateTime'>,
  category?: ?TransactionCategory,
  categoryCode?: ?$ElementType<Scalars, 'String'>,
  vatRate?: ?$ElementType<Scalars, 'String'>,
  vatAmount?: ?$ElementType<Scalars, 'Int'>,
  isSplit: $ElementType<Scalars, 'Boolean'>,
|};

export const TransactionProjectionTypeValues = Object.freeze({
  CreditPresentment: 'CREDIT_PRESENTMENT',
  CashManual: 'CASH_MANUAL',
  CashAtmReversal: 'CASH_ATM_REVERSAL',
  CashManualReversal: 'CASH_MANUAL_REVERSAL',
  PurchaseReversal: 'PURCHASE_REVERSAL',
  Oct: 'OCT',
  ForcePostTransaction: 'FORCE_POST_TRANSACTION',
  DebitPresentment: 'DEBIT_PRESENTMENT',
  DisputeTransaction: 'DISPUTE_TRANSACTION',
  Atm: 'ATM',
  CancelManualLoad: 'CANCEL_MANUAL_LOAD',
  CardUsage: 'CARD_USAGE',
  DirectDebitAutomaticTopup: 'DIRECT_DEBIT_AUTOMATIC_TOPUP',
  DirectDebitReturn: 'DIRECT_DEBIT_RETURN',
  DisputeClearing: 'DISPUTE_CLEARING',
  ManualLoad: 'MANUAL_LOAD',
  WireTransferTopup: 'WIRE_TRANSFER_TOPUP',
  TransferToBankAccount: 'TRANSFER_TO_BANK_ACCOUNT',
  CancellationBooking: 'CANCELLATION_BOOKING',
  CancellationDoubleBooking: 'CANCELLATION_DOUBLE_BOOKING',
  CreditTransferCancellation: 'CREDIT_TRANSFER_CANCELLATION',
  CurrencyTransactionCancellation: 'CURRENCY_TRANSACTION_CANCELLATION',
  DirectDebit: 'DIRECT_DEBIT',
  ForeignPayment: 'FOREIGN_PAYMENT',
  Other: 'OTHER',
  SepaCreditTransferReturn: 'SEPA_CREDIT_TRANSFER_RETURN',
  SepaCreditTransfer: 'SEPA_CREDIT_TRANSFER',
  SepaDirectDebitReturn: 'SEPA_DIRECT_DEBIT_RETURN',
  SepaDirectDebit: 'SEPA_DIRECT_DEBIT',
  Transfer: 'TRANSFER',
  InternationalCreditTransfer: 'INTERNATIONAL_CREDIT_TRANSFER',
  CancellationSepaDirectDebitReturn: 'CANCELLATION_SEPA_DIRECT_DEBIT_RETURN',
  Rebooking: 'REBOOKING',
  CancellationDirectDebit: 'CANCELLATION_DIRECT_DEBIT',
  CancellationSepaCreditTransferReturn: 'CANCELLATION_SEPA_CREDIT_TRANSFER_RETURN',
  CardTransaction: 'CARD_TRANSACTION',
  InterestAccrued: 'INTEREST_ACCRUED',
  CancellationInterestAccrued: 'CANCELLATION_INTEREST_ACCRUED',
  CommissionOverdraft: 'COMMISSION_OVERDRAFT',
  Charge: 'CHARGE',
  DepositFee: 'DEPOSIT_FEE',
  VerificationCode: 'VERIFICATION_CODE',
  CancellationCardTransaction: 'CANCELLATION_CARD_TRANSACTION',
  CancellationCharge: 'CANCELLATION_CHARGE',
  IntraCustomerTransfer: 'INTRA_CUSTOMER_TRANSFER',
  Target2CreditTransfer: 'Target2CreditTransfer',
  CorrectionCardTransaction: 'CorrectionCardTransaction',
  RebookedSepaDirectDebitCoreReturn: 'RebookedSEPADirectDebitCoreReturn',
  RebookedSepaCreditTransferReturn: 'RebookedSEPACreditTransferReturn',
  ChargeRecallRequest: 'ChargeRecallRequest',
  CorrectionSepaCreditTransfer: 'CorrectionSEPACreditTransfer',
  InterestExcessDeposit: 'InterestExcessDeposit',
  InterestOverdraft: 'InterestOverdraft',
  InterestOverdraftExceeded: 'InterestOverdraftExceeded',
  ReimbursementCustomer: 'ReimbursementCustomer'
});


export type TransactionProjectionType = $Values<typeof TransactionProjectionTypeValues>;

export type TransactionSplit = {|
  __typename?: 'TransactionSplit',
  id: $ElementType<Scalars, 'Int'>,
  uuid: $ElementType<Scalars, 'ID'>,
  amount: $ElementType<Scalars, 'Int'>,
  category: TransactionCategory,
  userSelectedBookingDate?: ?$ElementType<Scalars, 'DateTime'>,
  categorizationType?: ?CategorizationType,
|};

export type TransactionsConnection = {|
  __typename?: 'TransactionsConnection',
  edges: Array<TransactionsConnectionEdge>,
  pageInfo: PageInfo,
|};

export type TransactionsConnectionEdge = {|
  __typename?: 'TransactionsConnectionEdge',
  node: Transaction,
  cursor: $ElementType<Scalars, 'String'>,
|};

export type Transfer = {|
  __typename?: 'Transfer',
  id: $ElementType<Scalars, 'String'>,
  uuid: $ElementType<Scalars, 'String'>,
  /** The name of the transfer recipient */
  recipient: $ElementType<Scalars, 'String'>,
  /** The IBAN of the transfer recipient */
  iban: $ElementType<Scalars, 'String'>,
  /** The amount of the transfer in cents */
  amount: $ElementType<Scalars, 'Int'>,
  /** The status of the transfer */
  status?: ?TransferStatus,
  /** The date at which the payment will be executed for Timed Orders or Standing Orders */
  executeAt?: ?$ElementType<Scalars, 'DateTime'>,
  /** The date at which the last payment will be executed for Standing Orders */
  lastExecutionDate?: ?$ElementType<Scalars, 'DateTime'>,
  /** The purpose of the transfer - 140 max characters */
  purpose?: ?$ElementType<Scalars, 'String'>,
  /** The personal note of the transfer - 140 max characters */
  personalNote?: ?$ElementType<Scalars, 'String'>,
  /** The end to end ID of the transfer */
  e2eId?: ?$ElementType<Scalars, 'String'>,
  /** The reoccurrence type of the payments for Standing Orders */
  reoccurrence?: ?StandingOrderReoccurrenceType,
  /** The date at which the next payment will be executed for Standing Orders */
  nextOccurrence?: ?$ElementType<Scalars, 'DateTime'>,
  /** The user selected category for the SEPA Transfer */
  category?: ?TransactionCategory,
  /** List of uploaded Asset files for this transfer */
  assets?: ?Array<Asset>,
  /** When a transaction corresponds to a tax or vat payment, the user may specify at which date it should be considered booked */
  userSelectedBookingDate?: ?$ElementType<Scalars, 'DateTime'>,
|};

export const TransferStatusValues = Object.freeze({
  Authorized: 'AUTHORIZED',
  Confirmed: 'CONFIRMED',
  Booked: 'BOOKED',
  Created: 'CREATED',
  Active: 'ACTIVE',
  Inactive: 'INACTIVE',
  Canceled: 'CANCELED',
  AuthorizationRequired: 'AUTHORIZATION_REQUIRED',
  ConfirmationRequired: 'CONFIRMATION_REQUIRED',
  Scheduled: 'SCHEDULED',
  Executed: 'EXECUTED',
  Failed: 'FAILED'
});


export type TransferStatus = $Values<typeof TransferStatusValues>;

export type TransferSuggestion = {|
  __typename?: 'TransferSuggestion',
  iban: $ElementType<Scalars, 'String'>,
  name: $ElementType<Scalars, 'String'>,
|};

export const TransferTypeValues = Object.freeze({
  SepaTransfer: 'SEPA_TRANSFER',
  StandingOrder: 'STANDING_ORDER',
  TimedOrder: 'TIMED_ORDER'
});


export type TransferType = $Values<typeof TransferTypeValues>;

export type TransfersConnection = {|
  __typename?: 'TransfersConnection',
  edges: Array<TransfersConnectionEdge>,
  pageInfo: PageInfo,
|};

export type TransfersConnectionEdge = {|
  __typename?: 'TransfersConnectionEdge',
  node: Transfer,
  cursor: $ElementType<Scalars, 'String'>,
|};

export type TransfersConnectionFilter = {|
  status?: ?TransferStatus,
|};

export type UnfinishedTransfer = {|
  __typename?: 'UnfinishedTransfer',
  amount: $ElementType<Scalars, 'Int'>,
  recipient: $ElementType<Scalars, 'String'>,
  iban: $ElementType<Scalars, 'String'>,
  purpose: $ElementType<Scalars, 'String'>,
|};

/** The available fields to update an OAuth2 client */
export type UpdateClientInput = {|
  /** The name of the OAuth2 client displayed when users log in */
  name?: ?$ElementType<Scalars, 'String'>,
  /** The OAuth2 client secret */
  secret?: ?$ElementType<Scalars, 'String'>,
  /** The URL to redirect to after authentication */
  redirectUri?: ?$ElementType<Scalars, 'String'>,
  /** The grant types (i.e. ways to obtain access tokens) allowed for the client */
  grantTypes?: ?Array<GrantType>,
  /** The scopes the client has access to, limiting access to the corresponding parts of the API */
  scopes?: ?Array<ScopeType>,
  /** The id of the OAuth2 client to update */
  id: $ElementType<Scalars, 'String'>,
|};

export type UpdateSubscriptionPlanResult = {|
  __typename?: 'UpdateSubscriptionPlanResult',
  newPlan: $ElementType<Scalars, 'String'>,
  previousPlans: Array<PurchaseType>,
  hasOrderedPhysicalCard: $ElementType<Scalars, 'Boolean'>,
  updateActiveAt: $ElementType<Scalars, 'String'>,
  hasCanceledDowngrade: $ElementType<Scalars, 'Boolean'>,
  couponCode?: ?$ElementType<Scalars, 'String'>,
|};

export type UpdateTransactionSplitsInput = {|
  id: $ElementType<Scalars, 'Int'>,
  amount: $ElementType<Scalars, 'Int'>,
  category: TransactionCategory,
  userSelectedBookingDate?: ?$ElementType<Scalars, 'DateTime'>,
|};

/** The available fields to update a transfer */
export type UpdateTransferInput = {|
  /** The ID of the transfer to update */
  id: $ElementType<Scalars, 'String'>,
  /** The type of transfer to update, currently only Standing Orders are supported */
  type: TransferType,
  /** The amount of the Standing Order payment in cents */
  amount?: ?$ElementType<Scalars, 'Int'>,
  /** The date at which the last payment will be executed */
  lastExecutionDate?: ?$ElementType<Scalars, 'DateTime'>,
  /** The purpose of the Standing Order - 140 max characters, if not specified with the update, it will be set to null */
  purpose?: ?$ElementType<Scalars, 'String'>,
  /** The personal note of the transfer - 140 max characters */
  personalNote?: ?$ElementType<Scalars, 'String'>,
  /** The end to end ID of the Standing Order, if not specified with the update, it will be set to null */
  e2eId?: ?$ElementType<Scalars, 'String'>,
  /** The reoccurrence type of the payments for Standing Orders */
  reoccurrence?: ?StandingOrderReoccurrenceType,
  /** The user selected category for the SEPA Transfer */
  category?: ?TransactionCategory,
  /** When a transaction corresponds to a tax or vat payment, the user may specify at which date it should be considered booked */
  userSelectedBookingDate?: ?$ElementType<Scalars, 'DateTime'>,
|};

export type User = {|
  __typename?: 'User',
  email: $ElementType<Scalars, 'String'>,
  createdAt: $ElementType<Scalars, 'DateTime'>,
  vatPaymentFrequency?: ?PaymentFrequency,
  taxPaymentFrequency?: ?TaxPaymentFrequency,
  taxRate?: ?$ElementType<Scalars, 'Int'>,
  vatRate?: ?UserVatRate,
  /** The user's IDNow identification status */
  identificationStatus?: ?IdentificationStatus,
  /** The link to use for IDNow identification */
  identificationLink?: ?$ElementType<Scalars, 'String'>,
  /** The user's Solaris screening status */
  screeningStatus?: ?ScreeningStatus,
  gender?: ?Gender,
  firstName?: ?$ElementType<Scalars, 'String'>,
  lastName?: ?$ElementType<Scalars, 'String'>,
  birthPlace?: ?$ElementType<Scalars, 'String'>,
  birthDate?: ?$ElementType<Scalars, 'DateTime'>,
  nationality?: ?Nationality,
  street?: ?$ElementType<Scalars, 'String'>,
  postCode?: ?$ElementType<Scalars, 'String'>,
  city?: ?$ElementType<Scalars, 'String'>,
  mobileNumber?: ?$ElementType<Scalars, 'String'>,
  untrustedPhoneNumber?: ?$ElementType<Scalars, 'String'>,
  /** Indicates whether the user pays taxes in the US */
  isUSPerson?: ?$ElementType<Scalars, 'Boolean'>,
  companyType?: ?CompanyType,
  publicId: $ElementType<Scalars, 'ID'>,
  language?: ?$ElementType<Scalars, 'String'>,
  country?: ?$ElementType<Scalars, 'String'>,
  /** Business description provided by the user */
  businessPurpose?: ?$ElementType<Scalars, 'String'>,
  /** The economic sector of the user's business */
  economicSector?: ?$ElementType<Scalars, 'String'>,
  /** Business economic sector provided by the user */
  otherEconomicSector?: ?$ElementType<Scalars, 'String'>,
  vatNumber?: ?$ElementType<Scalars, 'String'>,
  /** The user's referral code to use for promotional purposes */
  referralCode?: ?$ElementType<Scalars, 'String'>,
  /** The current state of user's Kontist account based on his subscription plan */
  accountState?: ?AccountState,
  businessTradingName?: ?$ElementType<Scalars, 'String'>,
  /** Coupon code assigned to the user that can be redeemed during subscription update */
  couponCodeOffer?: ?$ElementType<Scalars, 'String'>,
  isSelfEmployed?: ?$ElementType<Scalars, 'Boolean'>,
  taxServiceOnboardingCompletedAt?: ?$ElementType<Scalars, 'DateTime'>,
  poaSignedAt?: ?$ElementType<Scalars, 'DateTime'>,
  poaExportedAt?: ?$ElementType<Scalars, 'DateTime'>,
  invoicePdf: $ElementType<Scalars, 'String'>,
  invoiceAsset: $ElementType<Scalars, 'String'>,
  vatDeclarationBannerDismissedAt?: ?$ElementType<Scalars, 'DateTime'>,
  invoice?: ?Invoice,
  /** The list of all OAuth2 clients for the current user */
  clients: Array<Client>,
  /** The details of an existing OAuth2 client */
  client?: ?Client,
  mainAccount?: ?Account,
  /** The plans a user has subscribed to */
  subscriptions: Array<UserSubscription>,
  /** The available subscription plans */
  subscriptionPlans: SubscriptionPlansResponse,
  /** The state of banners in mobile or web app for the user */
  banners?: ?Array<Banner>,
  /** Bookkeeping partners information for user */
  integrations: Array<UserIntegration>,
  /** Information about the plans a user can subscribe to */
  availablePlans: Array<SubscriptionPlan>,
  /** Tax details for user */
  taxDetails: UserTaxDetails,
  /** Active user features */
  features: Array<$ElementType<Scalars, 'String'>>,
  /** User's documents */
  documents: Array<Document>,
  /** Referral details for user */
  referral: ReferralDetails,
  /** IDNow identification details for user */
  identification: IdentificationDetails,
  /** User metadata. These fields are likely to get frequently updated or changed. */
  metadata: UserMetadata,
  unfinishedTransfers: Array<UnfinishedTransfer>,
  /** All push-notification types and their state */
  notifications: Array<Notification>,
  /** The user's associated Recurly Account */
  recurlyAccount?: ?RecurlyAccount,
  /** Premium subscription discount for user */
  premiumSubscriptionDiscount: Discount,
  invoiceSettings?: ?InvoiceSettingsOutput,
  /** Retrieves signed POA PDF for user. */
  poaUrl?: ?$ElementType<Scalars, 'String'>,
  invoices: InvoicingDashboardData,
  /** The list of all customers of the current user */
  invoiceCustomers?: ?Array<InvoiceCustomerOutput>,
|};


export type UserInvoiceAssetArgs = {|
  isBase64: $ElementType<Scalars, 'Boolean'>,
  invoiceId: $ElementType<Scalars, 'ID'>,
|};


export type UserInvoiceArgs = {|
  id: $ElementType<Scalars, 'String'>,
|};


export type UserClientArgs = {|
  id: $ElementType<Scalars, 'String'>,
|};


export type UserSubscriptionPlansArgs = {|
  couponCode?: ?$ElementType<Scalars, 'String'>,
|};


export type UserBannersArgs = {|
  isWebapp?: ?$ElementType<Scalars, 'Boolean'>,
|};


export type UserAvailablePlansArgs = {|
  couponCode?: ?$ElementType<Scalars, 'String'>,
|};


export type UserMetadataArgs = {|
  platform?: ?Platform,
|};


export type UserPremiumSubscriptionDiscountArgs = {|
  couponCode?: ?$ElementType<Scalars, 'String'>,
|};


export type UserInvoicesArgs = {|
  pageNumber: $ElementType<Scalars, 'Int'>,
|};

export type UserDependent = {|
  __typename?: 'UserDependent',
  id: $ElementType<Scalars, 'ID'>,
  type: UserDependentType,
  firstName: $ElementType<Scalars, 'String'>,
  lastName: $ElementType<Scalars, 'String'>,
  birthDate: $ElementType<Scalars, 'DateTime'>,
  deTaxId?: ?$ElementType<Scalars, 'String'>,
|};

export type UserDependentInput = {|
  id?: ?$ElementType<Scalars, 'ID'>,
  deTaxId?: ?$ElementType<Scalars, 'String'>,
  firstName: $ElementType<Scalars, 'String'>,
  lastName: $ElementType<Scalars, 'String'>,
  birthDate: $ElementType<Scalars, 'String'>,
  type: UserDependentType,
|};

export const UserDependentTypeValues = Object.freeze({
  Partner: 'PARTNER',
  Child: 'CHILD'
});


export type UserDependentType = $Values<typeof UserDependentTypeValues>;

export type UserIntegration = {|
  __typename?: 'UserIntegration',
  type: IntegrationType,
  hasAccount: $ElementType<Scalars, 'Boolean'>,
  isConnected: $ElementType<Scalars, 'Boolean'>,
|};

export type UserMetadata = {|
  __typename?: 'UserMetadata',
  currentTermsAccepted: $ElementType<Scalars, 'Boolean'>,
  acceptedTermsVersion?: ?$ElementType<Scalars, 'String'>,
  /** List of months user can request a bank statement for */
  availableStatements?: ?Array<AvailableStatements>,
  /** Is user's Kontist account closed */
  isAccountClosed: $ElementType<Scalars, 'Boolean'>,
  currentTermsVersion: $ElementType<Scalars, 'String'>,
  intercomDigest?: ?$ElementType<Scalars, 'String'>,
  directDebitMandateAccepted: $ElementType<Scalars, 'Boolean'>,
  marketingConsentAccepted: $ElementType<Scalars, 'Boolean'>,
  phoneNumberVerificationRequired: $ElementType<Scalars, 'Boolean'>,
  signupCompleted: $ElementType<Scalars, 'Boolean'>,
  categorizationScreenShown?: ?$ElementType<Scalars, 'Boolean'>,
  taxAdvisoryTermsVersionAccepted: $ElementType<Scalars, 'Boolean'>,
|};

export type UserProductInput = {|
  description?: ?$ElementType<Scalars, 'String'>,
  price?: ?$ElementType<Scalars, 'Float'>,
  vat?: ?$ElementType<Scalars, 'String'>,
  id?: ?$ElementType<Scalars, 'String'>,
|};

export const UserReviewStatusValues = Object.freeze({
  Reviewed: 'REVIEWED',
  PositiveReminder: 'POSITIVE_REMINDER',
  PositivePending: 'POSITIVE_PENDING',
  NegativePending: 'NEGATIVE_PENDING',
  NegativeReminder: 'NEGATIVE_REMINDER',
  Feedback: 'FEEDBACK'
});


export type UserReviewStatus = $Values<typeof UserReviewStatusValues>;

export type UserSubscription = {|
  __typename?: 'UserSubscription',
  /** The type of the plans a user has subscribed to */
  type: PurchaseType,
  /** The state of the subscription */
  state: PurchaseState,
|};

export type UserTaxDetails = {|
  __typename?: 'UserTaxDetails',
  adjustAdvancePayments: $ElementType<Scalars, 'Boolean'>,
  lastTaxPaymentDate?: ?$ElementType<Scalars, 'DateTime'>,
  lastVatPaymentDate?: ?$ElementType<Scalars, 'DateTime'>,
  vatPaymentFrequency?: ?PaymentFrequency,
  taxPaymentFrequency?: ?TaxPaymentFrequency,
  taxRate?: ?$ElementType<Scalars, 'Int'>,
  vatRate?: ?UserVatRate,
  taxNumber?: ?$ElementType<Scalars, 'String'>,
  deTaxId?: ?$ElementType<Scalars, 'String'>,
  vatNumber?: ?$ElementType<Scalars, 'String'>,
  needsToProvideTaxIdentification: $ElementType<Scalars, 'Boolean'>,
  permanentExtensionStatus?: ?PermanentExtensionStatus,
  dependents?: ?Array<UserDependent>,
|};

export type UserTaxDetailsInput = {|
  deTaxId?: ?$ElementType<Scalars, 'String'>,
  taxNumber?: ?$ElementType<Scalars, 'String'>,
  vatNumber?: ?$ElementType<Scalars, 'String'>,
  vatPaymentFrequency?: ?PaymentFrequency,
  permanentExtensionStatus?: ?PermanentExtensionStatus,
  dependentsTaxIds?: ?Array<DependentsTaxIds>,
|};

export type UserUpdateInput = {|
  birthDate?: ?$ElementType<Scalars, 'DateTime'>,
  city?: ?$ElementType<Scalars, 'String'>,
  firstName?: ?$ElementType<Scalars, 'String'>,
  lastName?: ?$ElementType<Scalars, 'String'>,
  country?: ?Nationality,
  nationality?: ?Nationality,
  postCode?: ?$ElementType<Scalars, 'String'>,
  street?: ?$ElementType<Scalars, 'String'>,
  birthPlace?: ?$ElementType<Scalars, 'String'>,
  /** Sets a mobile number for the user to be verified later */
  untrustedPhoneNumber?: ?$ElementType<Scalars, 'String'>,
  vatPaymentFrequency?: ?PaymentFrequency,
  vatNumber?: ?$ElementType<Scalars, 'String'>,
  vatRate?: ?$ElementType<Scalars, 'Int'>,
  language?: ?$ElementType<Scalars, 'String'>,
  gender?: ?Gender,
  /** Indicates whether the user pays taxes in the US */
  isUSPerson?: ?$ElementType<Scalars, 'Boolean'>,
  /** The version of terms user has accepted */
  acceptedTermsVersion?: ?$ElementType<Scalars, 'String'>,
  businessPurpose?: ?$ElementType<Scalars, 'String'>,
  economicSector?: ?$ElementType<Scalars, 'String'>,
  otherEconomicSector?: ?$ElementType<Scalars, 'String'>,
  businessTradingName?: ?$ElementType<Scalars, 'String'>,
  adjustAdvancePayments?: ?$ElementType<Scalars, 'Boolean'>,
  companyType?: ?CompanyType,
  isSelfEmployed?: ?$ElementType<Scalars, 'Boolean'>,
  /** Indicates user has accepted Kontist direct debit mandate */
  directDebitMandateAccepted?: ?$ElementType<Scalars, 'Boolean'>,
  /** Indicates user has confirmed he is opening their account in their name, for the use of their business */
  ownEconomicInterestConfirmed?: ?$ElementType<Scalars, 'Boolean'>,
  /** Indicates user has confirmed he is acting as a business and not a consumer */
  nonConsumerConfirmed?: ?$ElementType<Scalars, 'Boolean'>,
  /** Indicates user has accepted to receive Kontist marketing communication */
  marketingConsentAccepted?: ?$ElementType<Scalars, 'Boolean'>,
  categorizationScreenShown?: ?$ElementType<Scalars, 'Boolean'>,
  profession?: ?$ElementType<Scalars, 'String'>,
  accountingTool?: ?$ElementType<Scalars, 'String'>,
  hasSecondBusinessAccount?: ?$ElementType<Scalars, 'Boolean'>,
  maximumCashTransactionsPercentage?: ?MaximumCashTransactionsPercentage,
  hasEmployees?: ?$ElementType<Scalars, 'Boolean'>,
  internationalCustomers?: ?InternationalCustomers,
  permanentExtensionStatus?: ?PermanentExtensionStatus,
  taxAdvisoryTermsVersionAccepted?: ?$ElementType<Scalars, 'String'>,
  subjectToAccounting?: ?ThreeStateAnswer,
  workingInEcommerce?: ?$ElementType<Scalars, 'Boolean'>,
  hasMoreThanOneBusiness?: ?$ElementType<Scalars, 'Boolean'>,
  idnowReminderType?: ?IdnowReminderType,
  idnowReminderTime?: ?$ElementType<Scalars, 'DateTime'>,
  /** Indicates if user started upgrading to accounting plan */
  accountingOnboardingStarted?: ?$ElementType<Scalars, 'Boolean'>,
  /** Indicates if user started upgrading to Kontax plan */
  taxServiceOnboardingStarted?: ?$ElementType<Scalars, 'Boolean'>,
|};

export const UserVatRateValues = Object.freeze({
  Vat_0: 'VAT_0',
  Vat_19: 'VAT_19'
});


export type UserVatRate = $Values<typeof UserVatRateValues>;

export type VirtualCardDetailsArgs = {|
  signature: $ElementType<Scalars, 'String'>,
  deviceId: $ElementType<Scalars, 'String'>,
  jwk: Jwk,
  jwe: Jwe,
|};

export type WhitelistCardResponse = {|
  __typename?: 'WhitelistCardResponse',
  id: $ElementType<Scalars, 'String'>,
  resolution: CaseResolution,
  whitelistedUntil: $ElementType<Scalars, 'String'>,
|};
