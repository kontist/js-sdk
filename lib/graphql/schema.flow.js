// @flow

//
// ‚ùå WARNING: This file is autogenerated.
// üëâ Please use `npm run schema:generate`
//

/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {|
  ID: string,
  String: string,
  Boolean: boolean,
  Int: number,
  Float: number,
  /** The javascript `Date` as string. Type represents date and time as the ISO Date string. */
  DateTime: any,
  /** The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
  JSON: any,
  /** The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
  JSONObject: any,
|};

/** The bank account of the current user */
export type Account = {|
  __typename?: 'Account',
  availableBalance: $ElementType<Scalars, 'Int'>,
  balance: $ElementType<Scalars, 'Int'>,
  bic: $ElementType<Scalars, 'String'>,
  canCreateOverdraft: $ElementType<Scalars, 'Boolean'>,
  card?: ?Card,
  cardHolderRepresentation?: ?$ElementType<Scalars, 'String'>,
  cardHolderRepresentations: Array<$ElementType<Scalars, 'String'>>,
  cards: Array<Card>,
  declarationPdfUrl?: ?$ElementType<Scalars, 'String'>,
  declarationStats: DeclarationStats,
  declarations: Array<Declaration>,
  hasPendingCardFraudCase: $ElementType<Scalars, 'Boolean'>,
  iban: $ElementType<Scalars, 'String'>,
  /** Overdraft Application - only available for Kontist Application */
  overdraft?: ?Overdraft,
  pendingTransactionVerification: PendingTransactionVerification,
  publicId: $ElementType<Scalars, 'ID'>,
  /** Different information about account balances, e.g. taxes, VAT, ... */
  stats: AccountStats,
  /** Individual tax-related settings per year */
  taxYearSettings: Array<TaxYearSetting>,
  transaction?: ?Transaction,
  transactions: TransactionsConnection,
  transactionsCSV: $ElementType<Scalars, 'String'>,
  transfer?: ?Transfer,
  /** A list of iban/name combinations based on existing user's transactions, provided to assist users when creating new transfers */
  transferSuggestions?: ?Array<TransferSuggestion>,
  transfers: TransfersConnection,
|};


/** The bank account of the current user */
export type AccountCardArgs = {|
  filter?: ?CardFilter,
|};


/** The bank account of the current user */
export type AccountDeclarationPdfUrlArgs = {|
  id: $ElementType<Scalars, 'Int'>,
|};


/** The bank account of the current user */
export type AccountDeclarationStatsArgs = {|
  period: $ElementType<Scalars, 'String'>,
  year: $ElementType<Scalars, 'Int'>,
|};


/** The bank account of the current user */
export type AccountDeclarationsArgs = {|
  type: DeclarationType,
|};


/** The bank account of the current user */
export type AccountTransactionArgs = {|
  id: $ElementType<Scalars, 'ID'>,
|};


/** The bank account of the current user */
export type AccountTransactionsArgs = {|
  after?: ?$ElementType<Scalars, 'String'>,
  before?: ?$ElementType<Scalars, 'String'>,
  filter?: ?TransactionFilter,
  first?: ?$ElementType<Scalars, 'Int'>,
  last?: ?$ElementType<Scalars, 'Int'>,
|};


/** The bank account of the current user */
export type AccountTransactionsCsvArgs = {|
  from?: ?$ElementType<Scalars, 'DateTime'>,
  to?: ?$ElementType<Scalars, 'DateTime'>,
|};


/** The bank account of the current user */
export type AccountTransferArgs = {|
  id: $ElementType<Scalars, 'ID'>,
  type: TransferType,
|};


/** The bank account of the current user */
export type AccountTransfersArgs = {|
  after?: ?$ElementType<Scalars, 'String'>,
  before?: ?$ElementType<Scalars, 'String'>,
  first?: ?$ElementType<Scalars, 'Int'>,
  last?: ?$ElementType<Scalars, 'Int'>,
  type: TransferType,
  where?: ?TransfersConnectionFilter,
|};

export const AccountStateValues = Object.freeze({
  Blocked: 'BLOCKED',
  Free: 'FREE',
  FreeOld: 'FREE_OLD',
  Premium: 'PREMIUM',
  PremiumOld: 'PREMIUM_OLD',
  Trial: 'TRIAL'
});


export type AccountState = $Values<typeof AccountStateValues>;

export type AccountStats = {|
  __typename?: 'AccountStats',
  /** The amount that is currently available on the bank account */
  accountBalance: $ElementType<Scalars, 'Int'>,
  /** The amount that can be spent plus the amount from uknown */
  main: $ElementType<Scalars, 'Int'>,
  /** The amount of tax that is owed in the current year */
  taxCurrentYearAmount: $ElementType<Scalars, 'Int'>,
  /** The difference between taxTotal and accountBalance, if taxTotal > accountbalance */
  taxMissing: $ElementType<Scalars, 'Int'>,
  /** The amount of tax that was owed for all past years combined */
  taxPastYearsAmount?: ?$ElementType<Scalars, 'Int'>,
  /** The amount of tax that is owed (current + last years) */
  taxTotal: $ElementType<Scalars, 'Int'>,
  /** The amount that is not categorized */
  unknown: $ElementType<Scalars, 'Int'>,
  /** The amount of VAT that is owed in the current year */
  vatAmount: $ElementType<Scalars, 'Int'>,
  /** The difference between vatTotal and accountBalance, if vatTotal > accountBalance */
  vatMissing: $ElementType<Scalars, 'Int'>,
  /** The amount of VAT that is owed (current + last years) */
  vatTotal: $ElementType<Scalars, 'Int'>,
  /** The amount that can be spent after VAT and taxes calculation */
  yours: $ElementType<Scalars, 'Int'>,
|};

export type Asset = {|
  __typename?: 'Asset',
  assetableId: $ElementType<Scalars, 'ID'>,
  filetype: $ElementType<Scalars, 'String'>,
  fullsize: $ElementType<Scalars, 'String'>,
  id: $ElementType<Scalars, 'ID'>,
  name: $ElementType<Scalars, 'String'>,
  path: $ElementType<Scalars, 'String'>,
  thumbnail: $ElementType<Scalars, 'String'>,
|};

export type AttributionData = {|
  irclickid?: ?$ElementType<Scalars, 'String'>,
  /** Platform used for signup */
  platform?: ?Platform,
  preselected_plan?: ?$ElementType<Scalars, 'String'>,
  trackingId?: ?$ElementType<Scalars, 'String'>,
  utm_source?: ?$ElementType<Scalars, 'String'>,
|};

export type AuthorizeChangeRequestRespone = {|
  __typename?: 'AuthorizeChangeRequestRespone',
  stringToSign: $ElementType<Scalars, 'String'>,
|};

export type AvailableStatements = {|
  __typename?: 'AvailableStatements',
  months: Array<$ElementType<Scalars, 'Int'>>,
  year: $ElementType<Scalars, 'Int'>,
|};

export type Banner = {|
  __typename?: 'Banner',
  dismissedAt?: ?$ElementType<Scalars, 'DateTime'>,
  isVisible: $ElementType<Scalars, 'Boolean'>,
  name: BannerName,
|};

export const BannerNameValues = Object.freeze({
  Bookkeeping: 'BOOKKEEPING',
  FriendReferral: 'FRIEND_REFERRAL',
  Overdraft: 'OVERDRAFT',
  PrimaryWebapp: 'PRIMARY_WEBAPP',
  ReceiptMatching: 'RECEIPT_MATCHING',
  TaxService: 'TAX_SERVICE',
  VatDeclaration: 'VAT_DECLARATION'
});


export type BannerName = $Values<typeof BannerNameValues>;

export const BaseOperatorValues = Object.freeze({
  And: 'AND',
  Or: 'OR'
});


export type BaseOperator = $Values<typeof BaseOperatorValues>;

export type BatchTransfer = {|
  __typename?: 'BatchTransfer',
  id: $ElementType<Scalars, 'String'>,
  status: BatchTransferStatus,
  transfers: Array<SepaTransfer>,
|};

export const BatchTransferStatusValues = Object.freeze({
  Accepted: 'ACCEPTED',
  AuthorizationRequired: 'AUTHORIZATION_REQUIRED',
  ConfirmationRequired: 'CONFIRMATION_REQUIRED',
  Failed: 'FAILED',
  Successful: 'SUCCESSFUL'
});


export type BatchTransferStatus = $Values<typeof BatchTransferStatusValues>;

/** Business Address of a Kontax User */
export type BusinessAddress = {|
  __typename?: 'BusinessAddress',
  city: $ElementType<Scalars, 'String'>,
  deletedAt?: ?$ElementType<Scalars, 'DateTime'>,
  id: $ElementType<Scalars, 'ID'>,
  movingDate: $ElementType<Scalars, 'DateTime'>,
  postCode: $ElementType<Scalars, 'String'>,
  street: $ElementType<Scalars, 'String'>,
|};

export type Card = {|
  __typename?: 'Card',
  addedToApplePay: $ElementType<Scalars, 'Boolean'>,
  formattedExpirationDate?: ?$ElementType<Scalars, 'String'>,
  googlePayTokens: Array<GooglePayCardToken>,
  holder?: ?$ElementType<Scalars, 'String'>,
  id: $ElementType<Scalars, 'String'>,
  maskedPan?: ?$ElementType<Scalars, 'String'>,
  pinSet: $ElementType<Scalars, 'Boolean'>,
  settings: CardSettings,
  status: CardStatus,
  type: CardType,
|};

export const CardActionValues = Object.freeze({
  Block: 'BLOCK',
  Close: 'CLOSE',
  Unblock: 'UNBLOCK'
});


export type CardAction = $Values<typeof CardActionValues>;

export type CardFilter = {|
  id?: ?$ElementType<Scalars, 'String'>,
  type?: ?CardType,
|};

export type CardLimit = {|
  __typename?: 'CardLimit',
  maxAmountCents: $ElementType<Scalars, 'Float'>,
  maxTransactions: $ElementType<Scalars, 'Float'>,
|};

export type CardLimitInput = {|
  maxAmountCents: $ElementType<Scalars, 'Float'>,
  maxTransactions: $ElementType<Scalars, 'Float'>,
|};

export type CardLimits = {|
  __typename?: 'CardLimits',
  daily: CardLimit,
  monthly: CardLimit,
|};

export type CardLimitsInput = {|
  daily: CardLimitInput,
  monthly: CardLimitInput,
|};

export type CardSettings = {|
  __typename?: 'CardSettings',
  cardNotPresentLimits?: ?CardLimits,
  cardPresentLimits?: ?CardLimits,
  contactlessEnabled: $ElementType<Scalars, 'Boolean'>,
|};

export type CardSettingsInput = {|
  cardNotPresentLimits?: ?CardLimitsInput,
  cardPresentLimits?: ?CardLimitsInput,
  contactlessEnabled?: ?$ElementType<Scalars, 'Boolean'>,
|};

export const CardStatusValues = Object.freeze({
  ActivationBlockedBySolaris: 'ACTIVATION_BLOCKED_BY_SOLARIS',
  Active: 'ACTIVE',
  Blocked: 'BLOCKED',
  BlockedBySolaris: 'BLOCKED_BY_SOLARIS',
  Closed: 'CLOSED',
  ClosedBySolaris: 'CLOSED_BY_SOLARIS',
  Inactive: 'INACTIVE',
  Processing: 'PROCESSING'
});


export type CardStatus = $Values<typeof CardStatusValues>;

export const CardTypeValues = Object.freeze({
  MastercardBusinessDebit: 'MASTERCARD_BUSINESS_DEBIT',
  VirtualMastercardBusinessDebit: 'VIRTUAL_MASTERCARD_BUSINESS_DEBIT',
  VirtualVisaBusinessDebit: 'VIRTUAL_VISA_BUSINESS_DEBIT',
  VirtualVisaFreelanceDebit: 'VIRTUAL_VISA_FREELANCE_DEBIT',
  VisaBusinessDebit: 'VISA_BUSINESS_DEBIT',
  VisaBusinessDebit_2: 'VISA_BUSINESS_DEBIT_2'
});


export type CardType = $Values<typeof CardTypeValues>;

export const CaseResolutionValues = Object.freeze({
  Confirmed: 'CONFIRMED',
  Pending: 'PENDING',
  TimedOut: 'TIMED_OUT',
  Timeout: 'TIMEOUT',
  Whitelisted: 'WHITELISTED'
});


export type CaseResolution = $Values<typeof CaseResolutionValues>;

export const CategorizationTypeValues = Object.freeze({
  AutomaticKontistMl: 'AUTOMATIC_KONTIST_ML',
  BookkeepingPartner: 'BOOKKEEPING_PARTNER',
  Invoicing: 'INVOICING',
  Kontax: 'KONTAX',
  Script: 'SCRIPT',
  User: 'USER',
  UserOverwrite: 'USER_OVERWRITE'
});


export type CategorizationType = $Values<typeof CategorizationTypeValues>;

export type CategorizeTransactionForDeclarationResponse = {|
  __typename?: 'CategorizeTransactionForDeclarationResponse',
  category?: ?TransactionCategory,
  categoryCode?: ?$ElementType<Scalars, 'String'>,
  date?: ?$ElementType<Scalars, 'String'>,
|};

export type CategoryGroup = {|
  __typename?: 'CategoryGroup',
  amount: $ElementType<Scalars, 'Int'>,
  categoryCode: $ElementType<Scalars, 'String'>,
  categoryCodeTranslation: $ElementType<Scalars, 'String'>,
  transactions: Array<TransactionForAccountingView>,
|};

export type Client = {|
  __typename?: 'Client',
  /** The grant types (i.e. ways to obtain access tokens) allowed for the client */
  grantTypes?: ?Array<GrantType>,
  id: $ElementType<Scalars, 'ID'>,
  /** The name of the OAuth2 client displayed when users log in */
  name: $ElementType<Scalars, 'String'>,
  /** The URL to redirect to after authentication */
  redirectUri?: ?$ElementType<Scalars, 'String'>,
  /** The scopes the client has access to, limiting access to the corresponding parts of the API */
  scopes?: ?Array<ScopeType>,
|};

export const CompanyTypeValues = Object.freeze({
  Einzelunternehmer: 'EINZELUNTERNEHMER',
  EK: 'E_K',
  Freiberufler: 'FREIBERUFLER',
  Gbr: 'GBR',
  Gewerbetreibender: 'GEWERBETREIBENDER',
  Gmbh: 'GMBH',
  GmbhUndCoKg: 'GMBH_UND_CO_KG',
  Kg: 'KG',
  Kgaa: 'KGAA',
  Limited: 'LIMITED',
  Ohg: 'OHG',
  Partgg: 'PARTGG',
  Selbstaendig: 'SELBSTAENDIG',
  Ug: 'UG'
});


export type CompanyType = $Values<typeof CompanyTypeValues>;

export type ConfirmChangeRequestRespone = {|
  __typename?: 'ConfirmChangeRequestRespone',
  success: $ElementType<Scalars, 'Boolean'>,
|};

export type ConfirmFraudResponse = {|
  __typename?: 'ConfirmFraudResponse',
  id: $ElementType<Scalars, 'String'>,
  resolution: CaseResolution,
|};

export type ConfirmationRequest = {|
  __typename?: 'ConfirmationRequest',
  confirmationId: $ElementType<Scalars, 'String'>,
|};

export type ConfirmationRequestOrTransfer = ConfirmationRequest | Transfer;

export type ConfirmationStatus = {|
  __typename?: 'ConfirmationStatus',
  status: $ElementType<Scalars, 'String'>,
|};

export type CreateAssetResponse = {|
  __typename?: 'CreateAssetResponse',
  assetId: $ElementType<Scalars, 'ID'>,
  formData: Array<FormDataPair>,
  name?: ?$ElementType<Scalars, 'String'>,
  url: $ElementType<Scalars, 'String'>,
|};

export type CreateBusinessAddressInput = {|
  city: $ElementType<Scalars, 'String'>,
  movingDate: $ElementType<Scalars, 'DateTime'>,
  postCode: $ElementType<Scalars, 'String'>,
  street: $ElementType<Scalars, 'String'>,
|};

/** The available fields to create an OAuth2 client */
export type CreateClientInput = {|
  /** The grant types (i.e. ways to obtain access tokens) allowed for the client */
  grantTypes: Array<GrantType>,
  /** The name of the OAuth2 client displayed when users log in */
  name: $ElementType<Scalars, 'String'>,
  /** The URL to redirect to after authentication */
  redirectUri?: ?$ElementType<Scalars, 'String'>,
  /** The scopes the client has access to, limiting access to the corresponding parts of the API */
  scopes: Array<ScopeType>,
  /** The OAuth2 client secret */
  secret?: ?$ElementType<Scalars, 'String'>,
|};

export type CreateInvoiceLogoResponse = {|
  __typename?: 'CreateInvoiceLogoResponse',
  formData: Array<InvoiceLogoFormDataPair>,
  url: $ElementType<Scalars, 'String'>,
|};

export type CreateReviewResponse = {|
  __typename?: 'CreateReviewResponse',
  error?: ?$ElementType<Scalars, 'String'>,
  id?: ?$ElementType<Scalars, 'Float'>,
|};

/** The available fields to create a SEPA Transfer */
export type CreateSepaTransferInput = {|
  /** The amount of the SEPA Transfer in cents */
  amount: $ElementType<Scalars, 'Int'>,
  /** The end to end ID of the SEPA Transfer */
  e2eId?: ?$ElementType<Scalars, 'String'>,
  /** The IBAN of the SEPA Transfer recipient */
  iban: $ElementType<Scalars, 'String'>,
  /** The personal note of the SEPA Transfer - 140 max characters */
  personalNote?: ?$ElementType<Scalars, 'String'>,
  /** The purpose of the SEPA Transfer - 140 max characters */
  purpose?: ?$ElementType<Scalars, 'String'>,
  /** The name of the SEPA Transfer recipient */
  recipient: $ElementType<Scalars, 'String'>,
|};

export type CreateTaxNumberInput = {|
  description: $ElementType<Scalars, 'String'>,
  isMainBusinessTaxNumber: $ElementType<Scalars, 'Boolean'>,
  taxNumber: $ElementType<Scalars, 'String'>,
  type: TaxNumberType,
  validFrom?: ?$ElementType<Scalars, 'DateTime'>,
|};

export type CreateTransactionSplitsInput = {|
  amount: $ElementType<Scalars, 'Int'>,
  category: TransactionCategory,
  userSelectedBookingDate?: ?$ElementType<Scalars, 'DateTime'>,
|};

/** The available fields to create a transfer */
export type CreateTransferInput = {|
  /** The amount of the transfer in cents */
  amount: $ElementType<Scalars, 'Int'>,
  /** The user selected category for the SEPA Transfer */
  category?: ?TransactionCategory,
  /** The end to end ID of the transfer */
  e2eId?: ?$ElementType<Scalars, 'String'>,
  /** The date at which the payment will be executed for Timed Orders or Standing Orders */
  executeAt?: ?$ElementType<Scalars, 'DateTime'>,
  /** The IBAN of the transfer recipient */
  iban: $ElementType<Scalars, 'String'>,
  /** The date at which the last payment will be executed for Standing Orders */
  lastExecutionDate?: ?$ElementType<Scalars, 'DateTime'>,
  /** The personal note of the transfer - 140 max characters */
  personalNote?: ?$ElementType<Scalars, 'String'>,
  /** The purpose of the transfer - 140 max characters */
  purpose?: ?$ElementType<Scalars, 'String'>,
  /** The name of the transfer recipient */
  recipient: $ElementType<Scalars, 'String'>,
  /** The reoccurrence type of the payments for Standing Orders */
  reoccurrence?: ?StandingOrderReoccurrenceType,
  /** When a transaction corresponds to a tax or vat payment, the user may specify at which date it should be considered booked */
  userSelectedBookingDate?: ?$ElementType<Scalars, 'DateTime'>,
|};

export type CreateUserInput = {|
  attribution?: ?AttributionData,
  /** User's email. This will be used as their username. */
  email: $ElementType<Scalars, 'String'>,
  impactAttribution?: ?AttributionData,
  language?: ?$ElementType<Scalars, 'String'>,
  marketingConsentAccepted?: ?$ElementType<Scalars, 'Boolean'>,
  password: $ElementType<Scalars, 'String'>,
  /** User has accepted latest Kontist terms when signing up */
  terms?: ?$ElementType<Scalars, 'Boolean'>,
|};

export type Customer = {|
  __typename?: 'Customer',
  address?: ?$ElementType<Scalars, 'String'>,
  country?: ?$ElementType<Scalars, 'String'>,
  email?: ?$ElementType<Scalars, 'String'>,
  id: $ElementType<Scalars, 'ID'>,
  name?: ?$ElementType<Scalars, 'String'>,
  taxNumber?: ?$ElementType<Scalars, 'String'>,
  vatNumber?: ?$ElementType<Scalars, 'String'>,
|};

export type DashboardInvoice = {|
  __typename?: 'DashboardInvoice',
  amount?: ?$ElementType<Scalars, 'Int'>,
  dueDate?: ?$ElementType<Scalars, 'DateTime'>,
  id: $ElementType<Scalars, 'ID'>,
  invoiceNumber?: ?$ElementType<Scalars, 'Int'>,
  name?: ?$ElementType<Scalars, 'String'>,
  paidAt?: ?$ElementType<Scalars, 'DateTime'>,
  status: InvoiceStatusType,
  transactionId?: ?$ElementType<Scalars, 'ID'>,
|};


export type Declaration = {|
  __typename?: 'Declaration',
  amount: $ElementType<Scalars, 'Int'>,
  id: $ElementType<Scalars, 'Int'>,
  period: $ElementType<Scalars, 'String'>,
  uploadedAt: $ElementType<Scalars, 'DateTime'>,
  year: $ElementType<Scalars, 'Int'>,
|};

export type DeclarationStats = {|
  __typename?: 'DeclarationStats',
  amount: $ElementType<Scalars, 'Int'>,
  categoryGroups: Array<CategoryGroup>,
  uncategorized: Array<TransactionForAccountingView>,
|};

export const DeclarationTypeValues = Object.freeze({
  Euer: 'EUER',
  GewSt: 'GewSt',
  USt: 'USt',
  UStVa: 'UStVA'
});


export type DeclarationType = $Values<typeof DeclarationTypeValues>;

export type DependentsTaxIds = {|
  deTaxId: $ElementType<Scalars, 'String'>,
  id: $ElementType<Scalars, 'ID'>,
|};

export type DirectDebitFee = {|
  __typename?: 'DirectDebitFee',
  amount: $ElementType<Scalars, 'Int'>,
  id: $ElementType<Scalars, 'Int'>,
  invoiceStatus: InvoiceStatus,
  name: $ElementType<Scalars, 'String'>,
  type: TransactionFeeType,
  usedAt?: ?$ElementType<Scalars, 'DateTime'>,
|};

export type Discount = {|
  __typename?: 'Discount',
  amount: $ElementType<Scalars, 'Float'>,
  couponIsValid: $ElementType<Scalars, 'Boolean'>,
  description?: ?$ElementType<Scalars, 'String'>,
  subtitle?: ?$ElementType<Scalars, 'String'>,
|};

export type Document = {|
  __typename?: 'Document',
  createdAt: $ElementType<Scalars, 'DateTime'>,
  id: $ElementType<Scalars, 'ID'>,
  metadata?: ?DocumentMetadata,
  name: $ElementType<Scalars, 'String'>,
  note?: ?$ElementType<Scalars, 'String'>,
  type: $ElementType<Scalars, 'String'>,
  url: $ElementType<Scalars, 'String'>,
|};

export type DocumentCategory = {|
  __typename?: 'DocumentCategory',
  categoryName: $ElementType<Scalars, 'String'>,
  folderName: $ElementType<Scalars, 'String'>,
  id: $ElementType<Scalars, 'ID'>,
|};

export const DocumentMatchStatusValues = Object.freeze({
  AlreadyHasAsset: 'ALREADY_HAS_ASSET',
  LaterMatch: 'LATER_MATCH',
  ManualMatch: 'MANUAL_MATCH',
  ManualMatchUser: 'MANUAL_MATCH_USER',
  NoMatches: 'NO_MATCHES',
  OtherProviderMatch: 'OTHER_PROVIDER_MATCH',
  TooManyMatches: 'TOO_MANY_MATCHES',
  WrongMatch: 'WRONG_MATCH'
});


export type DocumentMatchStatus = $Values<typeof DocumentMatchStatusValues>;

export type DocumentMetadata = {|
  __typename?: 'DocumentMetadata',
  category: DocumentCategory,
|};

export const DocumentTypeValues = Object.freeze({
  Expense: 'EXPENSE',
  Invoice: 'INVOICE',
  Voucher: 'VOUCHER'
});


export type DocumentType = $Values<typeof DocumentTypeValues>;

export const DocumentUploadSourceValues = Object.freeze({
  Backoffice: 'BACKOFFICE',
  Email: 'EMAIL',
  EmailFetch: 'EMAIL_FETCH',
  Mobile: 'MOBILE',
  Web: 'WEB'
});


export type DocumentUploadSource = $Values<typeof DocumentUploadSourceValues>;

export type EmailDocument = {|
  __typename?: 'EmailDocument',
  amount?: ?$ElementType<Scalars, 'Int'>,
  createdAt: $ElementType<Scalars, 'DateTime'>,
  currency?: ?$ElementType<Scalars, 'String'>,
  date?: ?$ElementType<Scalars, 'DateTime'>,
  documentNumber?: ?$ElementType<Scalars, 'String'>,
  filename: $ElementType<Scalars, 'String'>,
  iban?: ?$ElementType<Scalars, 'String'>,
  id: $ElementType<Scalars, 'ID'>,
  matchStatus?: ?DocumentMatchStatus,
  /** Returns an array of transactions which potential match with an email document. Note that just a subset of transaction fields gets returned */
  matches?: ?Array<Transaction>,
  name?: ?$ElementType<Scalars, 'String'>,
  transactionId?: ?$ElementType<Scalars, 'ID'>,
  url: $ElementType<Scalars, 'String'>,
|};

export type FormDataPair = {|
  __typename?: 'FormDataPair',
  key: $ElementType<Scalars, 'String'>,
  value: $ElementType<Scalars, 'String'>,
|};

export const GenderValues = Object.freeze({
  Female: 'FEMALE',
  Male: 'MALE'
});


export type Gender = $Values<typeof GenderValues>;

export type GenericFeature = {|
  __typename?: 'GenericFeature',
  name: $ElementType<Scalars, 'String'>,
|};

export type GooglePayCardToken = {|
  __typename?: 'GooglePayCardToken',
  tokenRefId: $ElementType<Scalars, 'String'>,
  walletId: $ElementType<Scalars, 'String'>,
|};

export const GrantTypeValues = Object.freeze({
  AuthorizationCode: 'AUTHORIZATION_CODE',
  ClientCredentials: 'CLIENT_CREDENTIALS',
  Password: 'PASSWORD',
  RefreshToken: 'REFRESH_TOKEN'
});


export type GrantType = $Values<typeof GrantTypeValues>;

export type Icon = {|
  __typename?: 'Icon',
  uri: $ElementType<Scalars, 'String'>,
|};

export type IdentificationDetails = {|
  __typename?: 'IdentificationDetails',
  /** The number of identifications attempted by the user */
  attempts: $ElementType<Scalars, 'Int'>,
  /** The link to use for IDNow identification */
  link?: ?$ElementType<Scalars, 'String'>,
  /** The user's IDNow identification status */
  status?: ?IdentificationStatus,
|};

export const IdentificationStatusValues = Object.freeze({
  Aborted: 'ABORTED',
  Canceled: 'CANCELED',
  Created: 'CREATED',
  Expired: 'EXPIRED',
  Failed: 'FAILED',
  Pending: 'PENDING',
  PendingFailed: 'PENDING_FAILED',
  PendingSuccessful: 'PENDING_SUCCESSFUL',
  Successful: 'SUCCESSFUL'
});


export type IdentificationStatus = $Values<typeof IdentificationStatusValues>;

export const IdnowReminderTypeValues = Object.freeze({
  Email: 'EMAIL',
  Sms: 'SMS'
});


export type IdnowReminderType = $Values<typeof IdnowReminderTypeValues>;

export const IntegrationTypeValues = Object.freeze({
  Debitoor: 'DEBITOOR',
  Fastbill: 'FASTBILL',
  Lexoffice: 'LEXOFFICE'
});


export type IntegrationType = $Values<typeof IntegrationTypeValues>;

export const InternationalCustomersValues = Object.freeze({
  Eu: 'EU',
  None: 'NONE',
  Worldwide: 'WORLDWIDE'
});


export type InternationalCustomers = $Values<typeof InternationalCustomersValues>;

export type Invoice = {|
  __typename?: 'Invoice',
  customer?: ?Customer,
  dueDate?: ?$ElementType<Scalars, 'DateTime'>,
  id: $ElementType<Scalars, 'ID'>,
  invoiceNumber?: ?$ElementType<Scalars, 'Float'>,
  invoiceSettingsId?: ?$ElementType<Scalars, 'String'>,
  note?: ?$ElementType<Scalars, 'String'>,
  /** A list of products from the invoice */
  products?: ?Array<InvoiceProductOutput>,
  status: $ElementType<Scalars, 'String'>,
  transactionId: $ElementType<Scalars, 'ID'>,
|};

export type InvoiceCustomerInput = {|
  address?: ?$ElementType<Scalars, 'String'>,
  country?: ?$ElementType<Scalars, 'String'>,
  email?: ?$ElementType<Scalars, 'String'>,
  id?: ?$ElementType<Scalars, 'String'>,
  name?: ?$ElementType<Scalars, 'String'>,
  taxNumber?: ?$ElementType<Scalars, 'String'>,
  vatNumber?: ?$ElementType<Scalars, 'String'>,
|};

export type InvoiceCustomerOutput = {|
  __typename?: 'InvoiceCustomerOutput',
  address?: ?$ElementType<Scalars, 'String'>,
  country?: ?$ElementType<Scalars, 'String'>,
  email?: ?$ElementType<Scalars, 'String'>,
  id: $ElementType<Scalars, 'ID'>,
  name?: ?$ElementType<Scalars, 'String'>,
  taxNumber?: ?$ElementType<Scalars, 'String'>,
  vatNumber?: ?$ElementType<Scalars, 'String'>,
|};

export type InvoiceInput = {|
  customerId?: ?$ElementType<Scalars, 'String'>,
  dueDate?: ?$ElementType<Scalars, 'DateTime'>,
  id?: ?$ElementType<Scalars, 'String'>,
  invoiceSettingsId?: ?$ElementType<Scalars, 'String'>,
  note?: ?$ElementType<Scalars, 'String'>,
  products?: ?Array<InvoiceProductInput>,
  status: $ElementType<Scalars, 'String'>,
|};

export type InvoiceLogoFormDataPair = {|
  __typename?: 'InvoiceLogoFormDataPair',
  key: $ElementType<Scalars, 'String'>,
  value: $ElementType<Scalars, 'String'>,
|};

export type InvoiceOutput = {|
  __typename?: 'InvoiceOutput',
  customer?: ?InvoiceCustomerOutput,
  customerId?: ?$ElementType<Scalars, 'String'>,
  dueDate?: ?$ElementType<Scalars, 'DateTime'>,
  id?: ?$ElementType<Scalars, 'String'>,
  invoiceNumber?: ?$ElementType<Scalars, 'Float'>,
  invoiceSettingsId?: ?$ElementType<Scalars, 'String'>,
  note?: ?$ElementType<Scalars, 'String'>,
  products?: ?Array<InvoiceProductOutput>,
  status: $ElementType<Scalars, 'String'>,
|};

export type InvoicePageInfo = {|
  __typename?: 'InvoicePageInfo',
  currentPage: $ElementType<Scalars, 'Int'>,
  hasNextPage: $ElementType<Scalars, 'Boolean'>,
  hasPreviousPage: $ElementType<Scalars, 'Boolean'>,
|};

export type InvoiceProductInput = {|
  description?: ?$ElementType<Scalars, 'String'>,
  id?: ?$ElementType<Scalars, 'String'>,
  price?: ?$ElementType<Scalars, 'Float'>,
  quantity?: ?$ElementType<Scalars, 'Float'>,
  vat?: ?$ElementType<Scalars, 'String'>,
|};

export type InvoiceProductOutput = {|
  __typename?: 'InvoiceProductOutput',
  description?: ?$ElementType<Scalars, 'String'>,
  id: $ElementType<Scalars, 'String'>,
  price?: ?$ElementType<Scalars, 'Float'>,
  quantity?: ?$ElementType<Scalars, 'Float'>,
  vat?: ?$ElementType<Scalars, 'String'>,
|};

export type InvoiceSettingsInput = {|
  city?: ?$ElementType<Scalars, 'String'>,
  companyName?: ?$ElementType<Scalars, 'String'>,
  country?: ?$ElementType<Scalars, 'String'>,
  /** Number of days which get added to today's date to create a default value for due date on invoice creation form */
  dueDateDefaultOffset?: ?$ElementType<Scalars, 'Float'>,
  email?: ?$ElementType<Scalars, 'String'>,
  nextInvoiceNumber?: ?$ElementType<Scalars, 'Float'>,
  phoneNumber?: ?$ElementType<Scalars, 'String'>,
  postCode?: ?$ElementType<Scalars, 'String'>,
  senderName?: ?$ElementType<Scalars, 'String'>,
  streetLine?: ?$ElementType<Scalars, 'String'>,
  taxNumber?: ?$ElementType<Scalars, 'String'>,
  vatNumber?: ?$ElementType<Scalars, 'String'>,
|};

export type InvoiceSettingsOutput = {|
  __typename?: 'InvoiceSettingsOutput',
  city?: ?$ElementType<Scalars, 'String'>,
  companyName?: ?$ElementType<Scalars, 'String'>,
  country?: ?$ElementType<Scalars, 'String'>,
  /** Number of days which get added to today's date to create a default value for due date on invoice creation form */
  dueDateDefaultOffset?: ?$ElementType<Scalars, 'Float'>,
  email?: ?$ElementType<Scalars, 'String'>,
  id: $ElementType<Scalars, 'String'>,
  /** If a user's setting has a logoPath, we calculate a url to the thumbnail from it */
  logoUrl?: ?$ElementType<Scalars, 'String'>,
  nextInvoiceNumber?: ?$ElementType<Scalars, 'Float'>,
  phoneNumber?: ?$ElementType<Scalars, 'String'>,
  postCode?: ?$ElementType<Scalars, 'String'>,
  senderName?: ?$ElementType<Scalars, 'String'>,
  streetLine?: ?$ElementType<Scalars, 'String'>,
  taxNumber?: ?$ElementType<Scalars, 'String'>,
  vatNumber?: ?$ElementType<Scalars, 'String'>,
|};

export const InvoiceStatusValues = Object.freeze({
  Closed: 'CLOSED',
  Open: 'OPEN',
  Pending: 'PENDING',
  Rejected: 'REJECTED'
});


export type InvoiceStatus = $Values<typeof InvoiceStatusValues>;

export const InvoiceStatusTypeValues = Object.freeze({
  Created: 'CREATED',
  Draft: 'DRAFT',
  Paid: 'PAID',
  Sent: 'SENT'
});


export type InvoiceStatusType = $Values<typeof InvoiceStatusTypeValues>;

export type InvoicingDashboardData = {|
  __typename?: 'InvoicingDashboardData',
  data: Array<DashboardInvoice>,
  pageInfo: InvoicePageInfo,
|};



export type Jwe = {|
  alg: $ElementType<Scalars, 'String'>,
  enc: $ElementType<Scalars, 'String'>,
|};

export type Jwk = {|
  e: $ElementType<Scalars, 'String'>,
  kty: $ElementType<Scalars, 'String'>,
  n: $ElementType<Scalars, 'String'>,
|};

export const MaximumCashTransactionsPercentageValues = Object.freeze({
  Hundred: 'HUNDRED',
  Null: 'NULL',
  Ten: 'TEN'
});


export type MaximumCashTransactionsPercentage = $Values<typeof MaximumCashTransactionsPercentageValues>;

export type Money = {|
  __typename?: 'Money',
  /** The amount the user pays */
  amount: $ElementType<Scalars, 'Int'>,
  /** The amount the user saves */
  discountAmount: $ElementType<Scalars, 'Int'>,
  /** The amount the user saves in percentage */
  discountPercentage?: ?$ElementType<Scalars, 'Int'>,
  /** The amount plus discount amount */
  fullAmount?: ?$ElementType<Scalars, 'Int'>,
|};

export type Mutation = {|
  __typename?: 'Mutation',
  /** Activate a card */
  activateCard: Card,
  /** Activate Overdraft Application  - only available for Kontist Application */
  activateOverdraft?: ?Overdraft,
  /** Adds Google Pay card token reference id for given wallet id */
  addGooglePayCardToken: GooglePayCardToken,
  /** Assign a secret coupon code to the user who is rejected from kontax onboarding */
  assignKontaxCouponCodeToDeclinedUser: MutationResult,
  authorizeChangeRequest: AuthorizeChangeRequestRespone,
  /** Cancel an existing Timed Order or Standing Order */
  cancelTransfer: ConfirmationRequestOrTransfer,
  /** Adds card to given wallet */
  cardPushProvisioning: PushProvisioningOutput,
  /** Categorize transaction for VAT declaration */
  categorizeTransactionForDeclaration: CategorizeTransactionForDeclarationResponse,
  /** Set a new PIN, needs to be confirmed */
  changeCardPIN: ConfirmationRequest,
  /** Block or unblock or close a card */
  changeCardStatus: Card,
  /** Clear preselected plan */
  clearPreselectedPlan: MutationResult,
  /** Confirm a Standing Order cancellation */
  confirmCancelTransfer: Transfer,
  /** Confirm a PIN change request */
  confirmChangeCardPIN: ConfirmationStatus,
  confirmChangeRequest: ConfirmChangeRequestRespone,
  confirmFraud: ConfirmFraudResponse,
  /** Confirm a transfer creation */
  confirmTransfer: Transfer,
  /** Confirm the transfers creation */
  confirmTransfers: BatchTransfer,
  /** Connect user to a bookkeeping partner */
  connectIntegration: MutationResult,
  /** Creates an user's business address */
  createBusinessAddress: BusinessAddress,
  /** Create a new card */
  createCard: Card,
  /** Create an OAuth2 client */
  createClient: Client,
  /** The logo a user can add to his invoice. The path to it is stored in invoiceSettings */
  createInvoiceLogo: CreateInvoiceLogoResponse,
  createReview: CreateReviewResponse,
  /** Create user's taxNumber */
  createTaxNumber: TaxNumber,
  /** Create a transaction Asset and obtain an upload config */
  createTransactionAsset: CreateAssetResponse,
  /** Create transaction splits */
  createTransactionSplits: Transaction,
  /** Create a transfer. The transfer's type will be determined based on the provided input */
  createTransfer: ConfirmationRequest,
  /** Create multiple transfers at once. Only regular SEPA Transfers are supported */
  createTransfers: ConfirmationRequest,
  /** Create a new user */
  createUser: PublicMutationResult,
  createUserEmailAlias: MutationResult,
  /** Remove an Asset */
  deleteAsset: MutationResult,
  /** Delete an OAuth2 client */
  deleteClient: Client,
  /** Deletes document */
  deleteDocument: MutationResult,
  deleteEmailDocument: MutationResult,
  /** Deletes Google Pay card token reference id for given wallet id */
  deleteGooglePayCardToken: GooglePayCardToken,
  deleteInvoice: MutationResult,
  /** Deletes the logo of a user's settings entry */
  deleteInvoiceLogo: MutationResult,
  /** Delete user's taxNumber */
  deleteTaxNumber: MutationResult,
  /** Remove an Asset from the Transaction */
  deleteTransactionAsset: MutationResult,
  /** Delete transaction splits */
  deleteTransactionSplits: Transaction,
  dismissBanner: MutationResult,
  duplicateInvoice: InvoiceOutput,
  /** Confirm and validate an Asset upload as completed */
  finalizeAssetUpload: Asset,
  /** Confirm and validate an Asset upload as completed */
  finalizeTransactionAssetUpload: TransactionAsset,
  matchEmailDocumentToTransaction: MutationResult,
  postponeQuestionnaireAnswer: Questionnaire,
  refundDirectDebit: MutationResult,
  /** Close and order new card. Call when customer's card is damaged */
  reorderCard: Card,
  /** Call when customer's card is lost or stolen */
  replaceCard: Card,
  /** Create a new identification if applicable */
  requestIdentification: IdentificationDetails,
  /** Create Overdraft Application  - only available for Kontist Application */
  requestOverdraft?: ?Overdraft,
  /** Set the card holder representation for the customer */
  setCardHolderRepresentation: $ElementType<Scalars, 'String'>,
  /** Allow user to sign Power of Attorney */
  signPOA: MutationResult,
  startQuestionnaire: Questionnaire,
  /** Submits UStVA declaration */
  submitDeclaration: Declaration,
  submitQuestionnaireAnswer: Questionnaire,
  /** Subscribe user to a plan */
  subscribeToPlan: UserSubscription,
  /** Update settings (e.g. limits) */
  updateCardSettings: CardSettings,
  /** Update an OAuth2 client */
  updateClient: Client,
  /** Updates document meta */
  updateDocument: Document,
  updateInvoice: InvoiceOutput,
  updateInvoiceCustomer: InvoiceCustomerOutput,
  updateInvoiceSettings: InvoiceSettingsOutput,
  /** Updates overdraft application timestamps for rejected and offered overdraft screens - only available for Kontist Application */
  updateOverdraft?: ?Overdraft,
  updateReview: MutationResult,
  /** Update user's subscription plan */
  updateSubscriptionPlan: UpdateSubscriptionPlanResult,
  /** Updates user's taxNumber */
  updateTaxNumber: TaxNumber,
  /** Update individual tax-related settings per year */
  updateTaxYearSettings: Array<TaxYearSetting>,
  /** Categorize a transaction with an optional custom booking date for VAT or Tax categories, and add a personal note */
  updateTransaction: Transaction,
  /** Update transaction splits */
  updateTransactionSplits: Transaction,
  updateTransfer: ConfirmationRequestOrTransfer,
  /** Update the push-notifications a user should receive */
  updateUserNotifications: Array<Notification>,
  /** Update user signup information */
  updateUserSignupInformation: MutationResult,
  /** Update user's tax details */
  updateUserTaxDetails: MutationResult,
  /** Create or update user products that can be linked to the user's invoice(s) */
  upsertProducts: Array<Product>,
  /** Returns encrypted card details for virtual card */
  virtualCardDetails: $ElementType<Scalars, 'String'>,
  whitelistCard: WhitelistCardResponse,
|};


export type MutationActivateCardArgs = {|
  id: $ElementType<Scalars, 'String'>,
  verificationToken: $ElementType<Scalars, 'String'>,
|};


export type MutationAddGooglePayCardTokenArgs = {|
  id: $ElementType<Scalars, 'String'>,
  tokenRefId: $ElementType<Scalars, 'String'>,
  walletId: $ElementType<Scalars, 'String'>,
|};


export type MutationAuthorizeChangeRequestArgs = {|
  changeRequestId: $ElementType<Scalars, 'String'>,
  deviceId: $ElementType<Scalars, 'String'>,
|};


export type MutationCancelTransferArgs = {|
  id: $ElementType<Scalars, 'String'>,
  type: TransferType,
|};


export type MutationCardPushProvisioningArgs = {|
  android?: ?PushProvisioningAndroidInput,
  cardId: $ElementType<Scalars, 'String'>,
  ios?: ?PushProvisioningIosInput,
|};


export type MutationCategorizeTransactionForDeclarationArgs = {|
  category?: ?TransactionCategory,
  categoryCode?: ?$ElementType<Scalars, 'String'>,
  date?: ?$ElementType<Scalars, 'String'>,
  id: $ElementType<Scalars, 'ID'>,
  isSplit?: ?$ElementType<Scalars, 'Boolean'>,
|};


export type MutationChangeCardPinArgs = {|
  id: $ElementType<Scalars, 'String'>,
  pin: $ElementType<Scalars, 'String'>,
|};


export type MutationChangeCardStatusArgs = {|
  action: CardAction,
  id: $ElementType<Scalars, 'String'>,
|};


export type MutationConfirmCancelTransferArgs = {|
  authorizationToken: $ElementType<Scalars, 'String'>,
  confirmationId: $ElementType<Scalars, 'String'>,
  type: TransferType,
|};


export type MutationConfirmChangeCardPinArgs = {|
  authorizationToken: $ElementType<Scalars, 'String'>,
  confirmationId: $ElementType<Scalars, 'String'>,
  id: $ElementType<Scalars, 'String'>,
|};


export type MutationConfirmChangeRequestArgs = {|
  changeRequestId: $ElementType<Scalars, 'String'>,
  deviceId: $ElementType<Scalars, 'String'>,
  signature: $ElementType<Scalars, 'String'>,
|};


export type MutationConfirmTransferArgs = {|
  authorizationToken: $ElementType<Scalars, 'String'>,
  confirmationId: $ElementType<Scalars, 'String'>,
|};


export type MutationConfirmTransfersArgs = {|
  authorizationToken: $ElementType<Scalars, 'String'>,
  confirmationId: $ElementType<Scalars, 'String'>,
|};


export type MutationConnectIntegrationArgs = {|
  authorizationData: $ElementType<Scalars, 'String'>,
  type: IntegrationType,
|};


export type MutationCreateBusinessAddressArgs = {|
  payload: CreateBusinessAddressInput,
|};


export type MutationCreateCardArgs = {|
  cardHolderRepresentation?: ?$ElementType<Scalars, 'String'>,
  type: CardType,
|};


export type MutationCreateClientArgs = {|
  client: CreateClientInput,
|};


export type MutationCreateInvoiceLogoArgs = {|
  filetype: $ElementType<Scalars, 'String'>,
|};


export type MutationCreateReviewArgs = {|
  platform: ReviewTriggerPlatform,
  triggerName: ReviewTriggerName,
|};


export type MutationCreateTaxNumberArgs = {|
  payload: CreateTaxNumberInput,
|};


export type MutationCreateTransactionAssetArgs = {|
  assetableType?: ?$ElementType<Scalars, 'String'>,
  filetype: $ElementType<Scalars, 'String'>,
  name: $ElementType<Scalars, 'String'>,
  transactionId: $ElementType<Scalars, 'ID'>,
|};


export type MutationCreateTransactionSplitsArgs = {|
  splits: Array<CreateTransactionSplitsInput>,
  transactionId: $ElementType<Scalars, 'ID'>,
|};


export type MutationCreateTransferArgs = {|
  transfer: CreateTransferInput,
|};


export type MutationCreateTransfersArgs = {|
  transfers: Array<CreateSepaTransferInput>,
|};


export type MutationCreateUserArgs = {|
  payload: CreateUserInput,
|};


export type MutationCreateUserEmailAliasArgs = {|
  alias: $ElementType<Scalars, 'String'>,
  hash: $ElementType<Scalars, 'String'>,
|};


export type MutationDeleteAssetArgs = {|
  assetId: $ElementType<Scalars, 'ID'>,
|};


export type MutationDeleteClientArgs = {|
  id: $ElementType<Scalars, 'String'>,
|};


export type MutationDeleteDocumentArgs = {|
  id: $ElementType<Scalars, 'ID'>,
|};


export type MutationDeleteEmailDocumentArgs = {|
  id: $ElementType<Scalars, 'ID'>,
|};


export type MutationDeleteGooglePayCardTokenArgs = {|
  id: $ElementType<Scalars, 'String'>,
  tokenRefId: $ElementType<Scalars, 'String'>,
  walletId: $ElementType<Scalars, 'String'>,
|};


export type MutationDeleteInvoiceArgs = {|
  id: $ElementType<Scalars, 'ID'>,
|};


export type MutationDeleteTaxNumberArgs = {|
  id: $ElementType<Scalars, 'ID'>,
|};


export type MutationDeleteTransactionAssetArgs = {|
  assetId: $ElementType<Scalars, 'ID'>,
|};


export type MutationDeleteTransactionSplitsArgs = {|
  transactionId: $ElementType<Scalars, 'ID'>,
|};


export type MutationDismissBannerArgs = {|
  name: BannerName,
|};


export type MutationDuplicateInvoiceArgs = {|
  id: $ElementType<Scalars, 'ID'>,
|};


export type MutationFinalizeAssetUploadArgs = {|
  assetId: $ElementType<Scalars, 'ID'>,
|};


export type MutationFinalizeTransactionAssetUploadArgs = {|
  assetId: $ElementType<Scalars, 'ID'>,
|};


export type MutationMatchEmailDocumentToTransactionArgs = {|
  emailDocumentId: $ElementType<Scalars, 'ID'>,
  transactionId: $ElementType<Scalars, 'ID'>,
|};


export type MutationPostponeQuestionnaireAnswerArgs = {|
  questionName: $ElementType<Scalars, 'String'>,
  questionnaireId: $ElementType<Scalars, 'ID'>,
|};


export type MutationRefundDirectDebitArgs = {|
  transactionId: $ElementType<Scalars, 'String'>,
|};


export type MutationReorderCardArgs = {|
  id: $ElementType<Scalars, 'String'>,
|};


export type MutationReplaceCardArgs = {|
  id: $ElementType<Scalars, 'String'>,
|};


export type MutationSetCardHolderRepresentationArgs = {|
  cardHolderRepresentation: $ElementType<Scalars, 'String'>,
|};


export type MutationSignPoaArgs = {|
  dependents?: ?Array<UserDependentInput>,
  signature: $ElementType<Scalars, 'String'>,
|};


export type MutationStartQuestionnaireArgs = {|
  type: QuestionnaireType,
  year: $ElementType<Scalars, 'Int'>,
|};


export type MutationSubmitDeclarationArgs = {|
  period: $ElementType<Scalars, 'String'>,
  year: $ElementType<Scalars, 'Int'>,
|};


export type MutationSubmitQuestionnaireAnswerArgs = {|
  questionName: $ElementType<Scalars, 'String'>,
  questionnaireId: $ElementType<Scalars, 'ID'>,
  value?: ?$ElementType<Scalars, 'JSON'>,
|};


export type MutationSubscribeToPlanArgs = {|
  couponCode?: ?$ElementType<Scalars, 'String'>,
  type: PurchaseType,
|};


export type MutationUpdateCardSettingsArgs = {|
  id: $ElementType<Scalars, 'String'>,
  settings: CardSettingsInput,
|};


export type MutationUpdateClientArgs = {|
  client: UpdateClientInput,
|};


export type MutationUpdateDocumentArgs = {|
  id: $ElementType<Scalars, 'ID'>,
  metadata?: ?UpdateDocumentMetadata,
  name?: ?$ElementType<Scalars, 'String'>,
|};


export type MutationUpdateInvoiceArgs = {|
  payload: InvoiceInput,
|};


export type MutationUpdateInvoiceCustomerArgs = {|
  payload: InvoiceCustomerInput,
|};


export type MutationUpdateInvoiceSettingsArgs = {|
  payload: InvoiceSettingsInput,
|};


export type MutationUpdateOverdraftArgs = {|
  offeredScreenShown?: ?$ElementType<Scalars, 'Boolean'>,
  rejectionScreenShown?: ?$ElementType<Scalars, 'Boolean'>,
|};


export type MutationUpdateReviewArgs = {|
  reviewId: $ElementType<Scalars, 'Int'>,
  status: UserReviewStatus,
|};


export type MutationUpdateSubscriptionPlanArgs = {|
  couponCode?: ?$ElementType<Scalars, 'String'>,
  newPlan: PurchaseType,
|};


export type MutationUpdateTaxNumberArgs = {|
  id: $ElementType<Scalars, 'ID'>,
  payload: UpdateTaxNumberInput,
|};


export type MutationUpdateTaxYearSettingsArgs = {|
  taxYearSettings: Array<TaxYearSettingInput>,
|};


export type MutationUpdateTransactionArgs = {|
  category?: ?TransactionCategory,
  id: $ElementType<Scalars, 'String'>,
  personalNote?: ?$ElementType<Scalars, 'String'>,
  userSelectedBookingDate?: ?$ElementType<Scalars, 'DateTime'>,
|};


export type MutationUpdateTransactionSplitsArgs = {|
  splits: Array<UpdateTransactionSplitsInput>,
  transactionId: $ElementType<Scalars, 'ID'>,
|};


export type MutationUpdateTransferArgs = {|
  transfer: UpdateTransferInput,
|};


export type MutationUpdateUserNotificationsArgs = {|
  active: $ElementType<Scalars, 'Boolean'>,
  type: NotificationType,
|};


export type MutationUpdateUserSignupInformationArgs = {|
  payload: UserUpdateInput,
|};


export type MutationUpdateUserTaxDetailsArgs = {|
  payload: UserTaxDetailsInput,
|};


export type MutationUpsertProductsArgs = {|
  payload: Array<UserProductInput>,
|};


export type MutationVirtualCardDetailsArgs = {|
  args: VirtualCardDetailsArgs,
  id: $ElementType<Scalars, 'String'>,
|};

export type MutationResult = {|
  __typename?: 'MutationResult',
  success: $ElementType<Scalars, 'Boolean'>,
|};

export const NationalityValues = Object.freeze({
  Ad: 'AD',
  Ae: 'AE',
  Af: 'AF',
  Ag: 'AG',
  Ai: 'AI',
  Al: 'AL',
  Am: 'AM',
  Ao: 'AO',
  Aq: 'AQ',
  Ar: 'AR',
  As: 'AS',
  At: 'AT',
  Au: 'AU',
  Aw: 'AW',
  Ax: 'AX',
  Az: 'AZ',
  Ba: 'BA',
  Bb: 'BB',
  Bd: 'BD',
  Be: 'BE',
  Bf: 'BF',
  Bg: 'BG',
  Bh: 'BH',
  Bi: 'BI',
  Bj: 'BJ',
  Bl: 'BL',
  Bm: 'BM',
  Bn: 'BN',
  Bo: 'BO',
  Br: 'BR',
  Bs: 'BS',
  Bt: 'BT',
  Bv: 'BV',
  Bw: 'BW',
  By: 'BY',
  Bz: 'BZ',
  Ca: 'CA',
  Cc: 'CC',
  Cd: 'CD',
  Cf: 'CF',
  Cg: 'CG',
  Ch: 'CH',
  Ci: 'CI',
  Ck: 'CK',
  Cl: 'CL',
  Cm: 'CM',
  Cn: 'CN',
  Co: 'CO',
  Cr: 'CR',
  Cu: 'CU',
  Cv: 'CV',
  Cw: 'CW',
  Cx: 'CX',
  Cy: 'CY',
  Cz: 'CZ',
  De: 'DE',
  Dj: 'DJ',
  Dk: 'DK',
  Dm: 'DM',
  Do: 'DO',
  Dz: 'DZ',
  Ec: 'EC',
  Ee: 'EE',
  Eg: 'EG',
  Eh: 'EH',
  Er: 'ER',
  Es: 'ES',
  Et: 'ET',
  Fi: 'FI',
  Fj: 'FJ',
  Fk: 'FK',
  Fm: 'FM',
  Fo: 'FO',
  Fr: 'FR',
  Ga: 'GA',
  Gb: 'GB',
  Gd: 'GD',
  Ge: 'GE',
  Gf: 'GF',
  Gg: 'GG',
  Gh: 'GH',
  Gi: 'GI',
  Gl: 'GL',
  Gm: 'GM',
  Gn: 'GN',
  Gp: 'GP',
  Gq: 'GQ',
  Gr: 'GR',
  Gs: 'GS',
  Gt: 'GT',
  Gu: 'GU',
  Gw: 'GW',
  Gy: 'GY',
  Hk: 'HK',
  Hm: 'HM',
  Hn: 'HN',
  Hr: 'HR',
  Ht: 'HT',
  Hu: 'HU',
  Id: 'ID',
  Ie: 'IE',
  Il: 'IL',
  Im: 'IM',
  In: 'IN',
  Io: 'IO',
  Iq: 'IQ',
  Ir: 'IR',
  Is: 'IS',
  It: 'IT',
  Je: 'JE',
  Jm: 'JM',
  Jo: 'JO',
  Jp: 'JP',
  Ke: 'KE',
  Kg: 'KG',
  Kh: 'KH',
  Ki: 'KI',
  Km: 'KM',
  Kn: 'KN',
  Kp: 'KP',
  Kr: 'KR',
  Kw: 'KW',
  Ky: 'KY',
  Kz: 'KZ',
  La: 'LA',
  Lb: 'LB',
  Lc: 'LC',
  Li: 'LI',
  Lk: 'LK',
  Lr: 'LR',
  Ls: 'LS',
  Lt: 'LT',
  Lu: 'LU',
  Lv: 'LV',
  Ly: 'LY',
  Ma: 'MA',
  Mc: 'MC',
  Md: 'MD',
  Me: 'ME',
  Mf: 'MF',
  Mg: 'MG',
  Mh: 'MH',
  Mk: 'MK',
  Ml: 'ML',
  Mm: 'MM',
  Mn: 'MN',
  Mo: 'MO',
  Mp: 'MP',
  Mq: 'MQ',
  Mr: 'MR',
  Ms: 'MS',
  Mt: 'MT',
  Mu: 'MU',
  Mv: 'MV',
  Mw: 'MW',
  Mx: 'MX',
  My: 'MY',
  Mz: 'MZ',
  Na: 'NA',
  Nc: 'NC',
  Ne: 'NE',
  Nf: 'NF',
  Ng: 'NG',
  Ni: 'NI',
  Nl: 'NL',
  No: 'NO',
  Np: 'NP',
  Nr: 'NR',
  Nu: 'NU',
  Nz: 'NZ',
  Om: 'OM',
  Pa: 'PA',
  Pe: 'PE',
  Pf: 'PF',
  Pg: 'PG',
  Ph: 'PH',
  Pk: 'PK',
  Pl: 'PL',
  Pm: 'PM',
  Pn: 'PN',
  Pr: 'PR',
  Ps: 'PS',
  Pt: 'PT',
  Pw: 'PW',
  Py: 'PY',
  Qa: 'QA',
  Re: 'RE',
  Ro: 'RO',
  Rs: 'RS',
  Ru: 'RU',
  Rw: 'RW',
  Sa: 'SA',
  Sb: 'SB',
  Sc: 'SC',
  Sd: 'SD',
  Se: 'SE',
  Sg: 'SG',
  Si: 'SI',
  Sj: 'SJ',
  Sk: 'SK',
  Sl: 'SL',
  Sm: 'SM',
  Sn: 'SN',
  So: 'SO',
  Sr: 'SR',
  Ss: 'SS',
  St: 'ST',
  Sv: 'SV',
  Sx: 'SX',
  Sy: 'SY',
  Sz: 'SZ',
  Tc: 'TC',
  Td: 'TD',
  Tf: 'TF',
  Tg: 'TG',
  Th: 'TH',
  Tj: 'TJ',
  Tk: 'TK',
  Tl: 'TL',
  Tm: 'TM',
  Tn: 'TN',
  To: 'TO',
  Tr: 'TR',
  Tt: 'TT',
  Tv: 'TV',
  Tw: 'TW',
  Tz: 'TZ',
  Ua: 'UA',
  Ug: 'UG',
  Um: 'UM',
  Us: 'US',
  Uy: 'UY',
  Uz: 'UZ',
  Va: 'VA',
  Vc: 'VC',
  Ve: 'VE',
  Vg: 'VG',
  Vi: 'VI',
  Vn: 'VN',
  Vu: 'VU',
  Wf: 'WF',
  Ws: 'WS',
  Xk: 'XK',
  Ye: 'YE',
  Yt: 'YT',
  Za: 'ZA',
  Zm: 'ZM',
  Zw: 'ZW'
});


export type Nationality = $Values<typeof NationalityValues>;

export type Notification = {|
  __typename?: 'Notification',
  active: $ElementType<Scalars, 'Boolean'>,
  type: NotificationType,
|};

export const NotificationTypeValues = Object.freeze({
  All: 'ALL',
  AtmWithdrawalTransactions: 'ATM_WITHDRAWAL_TRANSACTIONS',
  CardTransactions: 'CARD_TRANSACTIONS',
  DirectDebitTransactions: 'DIRECT_DEBIT_TRANSACTIONS',
  IncomingTransactions: 'INCOMING_TRANSACTIONS',
  ProductInfo: 'PRODUCT_INFO',
  ReceiptScanning: 'RECEIPT_SCANNING',
  Statements: 'STATEMENTS',
  Tax: 'TAX',
  Transactions: 'TRANSACTIONS'
});


export type NotificationType = $Values<typeof NotificationTypeValues>;

export type Overdraft = {|
  __typename?: 'Overdraft',
  id: $ElementType<Scalars, 'String'>,
  /** Available overdraft limit */
  limit?: ?$ElementType<Scalars, 'Int'>,
  /** Indicates if offered screen for overdraft was shown */
  offeredScreenShown: $ElementType<Scalars, 'Boolean'>,
  /** Indicates if rejection screen for overdraft was shown */
  rejectionScreenShown: $ElementType<Scalars, 'Boolean'>,
  /** Overdraft request date */
  requestedAt: $ElementType<Scalars, 'DateTime'>,
  /** Overdraft status */
  status: OverdraftApplicationStatus,
|};

export const OverdraftApplicationStatusValues = Object.freeze({
  AccountSnapshotPending: 'ACCOUNT_SNAPSHOT_PENDING',
  AccountSnapshotVerificationPending: 'ACCOUNT_SNAPSHOT_VERIFICATION_PENDING',
  Created: 'CREATED',
  Expired: 'EXPIRED',
  InitialScoringPending: 'INITIAL_SCORING_PENDING',
  Offered: 'OFFERED',
  OverdraftCreated: 'OVERDRAFT_CREATED',
  Rejected: 'REJECTED'
});


export type OverdraftApplicationStatus = $Values<typeof OverdraftApplicationStatusValues>;

export type PageInfo = {|
  __typename?: 'PageInfo',
  endCursor?: ?$ElementType<Scalars, 'String'>,
  hasNextPage: $ElementType<Scalars, 'Boolean'>,
  hasPreviousPage: $ElementType<Scalars, 'Boolean'>,
  startCursor?: ?$ElementType<Scalars, 'String'>,
|};

export const PaymentFrequencyValues = Object.freeze({
  Monthly: 'MONTHLY',
  None: 'NONE',
  NoneQuarterly: 'NONE_QUARTERLY',
  Quarterly: 'QUARTERLY',
  Yearly: 'YEARLY'
});


export type PaymentFrequency = $Values<typeof PaymentFrequencyValues>;

export type PendingTransactionVerification = {|
  __typename?: 'PendingTransactionVerification',
  /** Transaction amount */
  amount: $ElementType<Scalars, 'String'>,
  /** Change request id to authenticate verification */
  authenticateChangeRequestId: $ElementType<Scalars, 'String'>,
  /** Change request id to decline verification */
  declineChangeRequestId: $ElementType<Scalars, 'String'>,
  /** When verification gets expired */
  expiresAt: $ElementType<Scalars, 'String'>,
  /** Transaction merchant name */
  name: $ElementType<Scalars, 'String'>,
|};

export const PermanentExtensionStatusValues = Object.freeze({
  DoesHave: 'DOES_HAVE',
  DoesNotHave: 'DOES_NOT_HAVE',
  DoesNotKnow: 'DOES_NOT_KNOW'
});


export type PermanentExtensionStatus = $Values<typeof PermanentExtensionStatusValues>;

export const PlatformValues = Object.freeze({
  Android: 'ANDROID',
  Ios: 'IOS',
  Web: 'WEB'
});


export type Platform = $Values<typeof PlatformValues>;

export type Product = {|
  __typename?: 'Product',
  description?: ?$ElementType<Scalars, 'String'>,
  id: $ElementType<Scalars, 'ID'>,
  price?: ?$ElementType<Scalars, 'Float'>,
  vat?: ?$ElementType<Scalars, 'String'>,
|};

export type PublicMutationResult = {|
  __typename?: 'PublicMutationResult',
  success: $ElementType<Scalars, 'Boolean'>,
|};

export const PurchaseStateValues = Object.freeze({
  Pending: 'PENDING',
  Processed: 'PROCESSED'
});


export type PurchaseState = $Values<typeof PurchaseStateValues>;

export const PurchaseTypeValues = Object.freeze({
  Accounting: 'ACCOUNTING',
  Basic: 'BASIC',
  BasicInitial: 'BASIC_INITIAL',
  Card: 'CARD',
  Kontax: 'KONTAX',
  KontaxPending: 'KONTAX_PENDING',
  KontaxSb: 'KONTAX_SB',
  Lexoffice: 'LEXOFFICE',
  Premium: 'PREMIUM'
});


export type PurchaseType = $Values<typeof PurchaseTypeValues>;

export type PushProvisioningAndroidInput = {|
  /** Stable identifier for a physical Android device Google refers to this atribute as a Stable hardware ID in their SDK documentation the method getStableHardwareId describes how you can retrieve this value. */
  deviceId?: ?$ElementType<Scalars, 'String'>,
  /** Unique 24-byte identifier for each instance of a [Android user, Google account] pair wallet. ID is computed as a keyed hash of the Android user ID and the Google account ID. The key to this hash lives on Google servers, meaning the wallet ID is created during user setup as an RPC. */
  walletAccountId?: ?$ElementType<Scalars, 'String'>,
|};

export type PushProvisioningIosInput = {|
  /** An array of leaf and sub-CA certificates in Base64 encoded format provided by Apple. Each object contains a DER encoded X.509 certificate, with the leaf first and followed by sub-CA */
  certificates?: ?Array<$ElementType<Scalars, 'String'>>,
  /** A one-time-use nonce in Base64 encoded format provided by Apple */
  nonce?: ?$ElementType<Scalars, 'String'>,
  /** Nonce signature in Base64 encoded format provided by Apple */
  nonceSignature?: ?$ElementType<Scalars, 'String'>,
|};

export type PushProvisioningOutput = {|
  __typename?: 'PushProvisioningOutput',
  activationData?: ?$ElementType<Scalars, 'String'>,
  encryptedPassData?: ?$ElementType<Scalars, 'String'>,
  ephemeralPublicKey?: ?$ElementType<Scalars, 'String'>,
  walletPayload?: ?$ElementType<Scalars, 'String'>,
|};

export type Query = {|
  __typename?: 'Query',
  /** Get all released generic features, that are needed before user creation */
  genericFeatures: Array<GenericFeature>,
  status: SystemStatus,
  /** The current user information */
  viewer?: ?User,
|};

export type Questionnaire = {|
  __typename?: 'Questionnaire',
  completedAt?: ?$ElementType<Scalars, 'DateTime'>,
  id: $ElementType<Scalars, 'ID'>,
  nextQuestion?: ?QuestionnaireQuestion,
  startedAt: $ElementType<Scalars, 'DateTime'>,
  type: QuestionnaireType,
  year: $ElementType<Scalars, 'Int'>,
|};


export type QuestionnaireNextQuestionArgs = {|
  includePostponed?: ?$ElementType<Scalars, 'Boolean'>,
|};

export type QuestionnaireQuestion = {|
  __typename?: 'QuestionnaireQuestion',
  inputConfig?: ?$ElementType<Scalars, 'JSONObject'>,
  name: $ElementType<Scalars, 'String'>,
  postponable?: ?$ElementType<Scalars, 'Boolean'>,
  topic: $ElementType<Scalars, 'String'>,
|};

export const QuestionnaireTypeValues = Object.freeze({
  EoyBasicData: 'EOY_BASIC_DATA',
  EoyCarUsage: 'EOY_CAR_USAGE',
  EoyOfficeUsage: 'EOY_OFFICE_USAGE',
  EoyTravelExpenses: 'EOY_TRAVEL_EXPENSES',
  StartOfTheYear: 'START_OF_THE_YEAR'
});


export type QuestionnaireType = $Values<typeof QuestionnaireTypeValues>;

export type RecurlyAccount = {|
  __typename?: 'RecurlyAccount',
  accountManagementUrl: $ElementType<Scalars, 'String'>,
  balance: $ElementType<Scalars, 'Float'>,
  pastDue: $ElementType<Scalars, 'Boolean'>,
  pastDueSince?: ?$ElementType<Scalars, 'DateTime'>,
  recurlyAccountId: $ElementType<Scalars, 'String'>,
|};

export type ReferralDetails = {|
  __typename?: 'ReferralDetails',
  /** Amount in euros granted to user and their referee */
  bonusAmount: $ElementType<Scalars, 'Int'>,
  code?: ?$ElementType<Scalars, 'String'>,
  copy: $ElementType<Scalars, 'String'>,
  link?: ?$ElementType<Scalars, 'String'>,
|};

export const ReviewTriggerNameValues = Object.freeze({
  BatchTransfers: 'BATCH_TRANSFERS',
  Googlepay: 'GOOGLEPAY',
  OutgoingTransactions: 'OUTGOING_TRANSACTIONS',
  OverdraftOffered: 'OVERDRAFT_OFFERED',
  PhysicalCardActivated: 'PHYSICAL_CARD_ACTIVATED',
  ReceiptsScanned: 'RECEIPTS_SCANNED',
  SettingsButtonClicked: 'SETTINGS_BUTTON_CLICKED',
  VirtualCardActivated: 'VIRTUAL_CARD_ACTIVATED'
});


export type ReviewTriggerName = $Values<typeof ReviewTriggerNameValues>;

export const ReviewTriggerPlatformValues = Object.freeze({
  Mobile: 'MOBILE',
  Webapp: 'WEBAPP'
});


export type ReviewTriggerPlatform = $Values<typeof ReviewTriggerPlatformValues>;

export const ScopeTypeValues = Object.freeze({
  Accounts: 'ACCOUNTS',
  Admin: 'ADMIN',
  Banners: 'BANNERS',
  CardFraud: 'CARD_FRAUD',
  ChangeRequest: 'CHANGE_REQUEST',
  Clients: 'CLIENTS',
  Offline: 'OFFLINE',
  Overdraft: 'OVERDRAFT',
  Signup: 'SIGNUP',
  Statements: 'STATEMENTS',
  Subscriptions: 'SUBSCRIPTIONS',
  Transactions: 'TRANSACTIONS',
  Transfers: 'TRANSFERS',
  Users: 'USERS'
});


export type ScopeType = $Values<typeof ScopeTypeValues>;

export const ScreeningStatusValues = Object.freeze({
  NotScreened: 'NOT_SCREENED',
  PotentialMatch: 'POTENTIAL_MATCH',
  ScreenedAccepted: 'SCREENED_ACCEPTED',
  ScreenedDeclined: 'SCREENED_DECLINED'
});


export type ScreeningStatus = $Values<typeof ScreeningStatusValues>;

export type SepaTransfer = {|
  __typename?: 'SepaTransfer',
  /** The amount of the SEPA Transfer in cents */
  amount: $ElementType<Scalars, 'Int'>,
  /** List of uploaded Asset files for this transfer */
  assets: Array<Asset>,
  /** The end to end ID of the SEPA Transfer */
  e2eId?: ?$ElementType<Scalars, 'String'>,
  /** The IBAN of the SEPA Transfer recipient */
  iban: $ElementType<Scalars, 'String'>,
  id: $ElementType<Scalars, 'String'>,
  /** The purpose of the SEPA Transfer - 140 max characters */
  purpose?: ?$ElementType<Scalars, 'String'>,
  /** The name of the SEPA Transfer recipient */
  recipient: $ElementType<Scalars, 'String'>,
  /** The status of the SEPA Transfer */
  status: SepaTransferStatus,
|};

export const SepaTransferStatusValues = Object.freeze({
  Authorized: 'AUTHORIZED',
  Booked: 'BOOKED',
  Confirmed: 'CONFIRMED'
});


export type SepaTransferStatus = $Values<typeof SepaTransferStatusValues>;

export const StandingOrderReoccurrenceTypeValues = Object.freeze({
  Annually: 'ANNUALLY',
  EverySixMonths: 'EVERY_SIX_MONTHS',
  Monthly: 'MONTHLY',
  Quarterly: 'QUARTERLY'
});


export type StandingOrderReoccurrenceType = $Values<typeof StandingOrderReoccurrenceTypeValues>;

export const StatusValues = Object.freeze({
  Error: 'ERROR'
});


export type Status = $Values<typeof StatusValues>;

export type Subscription = {|
  __typename?: 'Subscription',
  newTransaction: Transaction,
|};

export type SubscriptionFeature = {|
  __typename?: 'SubscriptionFeature',
  icon?: ?Icon,
  title: $ElementType<Scalars, 'String'>,
|};

export type SubscriptionFeatureGroup = {|
  __typename?: 'SubscriptionFeatureGroup',
  features: Array<SubscriptionFeature>,
  icon?: ?Icon,
  title?: ?$ElementType<Scalars, 'String'>,
|};

export type SubscriptionPlan = {|
  __typename?: 'SubscriptionPlan',
  button: $ElementType<Scalars, 'String'>,
  description: $ElementType<Scalars, 'String'>,
  featureGroups: Array<SubscriptionFeatureGroup>,
  featuresToggleLabel?: ?$ElementType<Scalars, 'String'>,
  fee: Money,
  subtitle?: ?$ElementType<Scalars, 'String'>,
  title: $ElementType<Scalars, 'String'>,
  type: PurchaseType,
|};

export type SubscriptionPlansResponse = {|
  __typename?: 'SubscriptionPlansResponse',
  couponCode?: ?$ElementType<Scalars, 'String'>,
  couponValidFor?: ?Array<PurchaseType>,
  plans: Array<SubscriptionPlan>,
|};

export type SystemStatus = {|
  __typename?: 'SystemStatus',
  message?: ?$ElementType<Scalars, 'String'>,
  type?: ?Status,
|};

/** Tax numbers of users */
export type TaxNumber = {|
  __typename?: 'TaxNumber',
  deletedAt?: ?$ElementType<Scalars, 'DateTime'>,
  description: $ElementType<Scalars, 'String'>,
  id: $ElementType<Scalars, 'ID'>,
  isMainBusinessTaxNumber: $ElementType<Scalars, 'Boolean'>,
  taxNumber: $ElementType<Scalars, 'String'>,
  type: TaxNumberType,
  validFrom?: ?$ElementType<Scalars, 'DateTime'>,
|};

export const TaxNumberTypeValues = Object.freeze({
  Business: 'BUSINESS',
  Personal: 'PERSONAL'
});


export type TaxNumberType = $Values<typeof TaxNumberTypeValues>;

export const TaxPaymentFrequencyValues = Object.freeze({
  Quarterly: 'QUARTERLY'
});


export type TaxPaymentFrequency = $Values<typeof TaxPaymentFrequencyValues>;

export type TaxYearSetting = {|
  __typename?: 'TaxYearSetting',
  /** Flag if the corresponding year should be excluded from the tax calculations completely */
  excluded?: ?$ElementType<Scalars, 'Boolean'>,
  /** Tax rate that should be applied in the corresponding year */
  taxRate?: ?$ElementType<Scalars, 'Int'>,
  /** Tax year the individual settings apply to */
  year: $ElementType<Scalars, 'Int'>,
|};

export type TaxYearSettingInput = {|
  /** Flag if the corresponding year should be excluded from the tax calculations completely */
  excluded?: ?$ElementType<Scalars, 'Boolean'>,
  /** Tax rate that should be applied in the corresponding year */
  taxRate?: ?$ElementType<Scalars, 'Int'>,
  /** Tax year the individual settings apply to */
  year: $ElementType<Scalars, 'Int'>,
|};

export const ThreeStateAnswerValues = Object.freeze({
  No: 'NO',
  NotSure: 'NOT_SURE',
  Yes: 'YES'
});


export type ThreeStateAnswer = $Values<typeof ThreeStateAnswerValues>;

export type Transaction = {|
  __typename?: 'Transaction',
  /** The amount of the transaction in cents */
  amount: $ElementType<Scalars, 'Int'>,
  /** View a single Asset for a transaction */
  asset?: ?TransactionAsset,
  /** List of uploaded Asset files for this transaction */
  assets: Array<TransactionAsset>,
  /** The date at which the transaction was booked (created) */
  bookingDate: $ElementType<Scalars, 'DateTime'>,
  canBeRecategorized: $ElementType<Scalars, 'Boolean'>,
  categorizationType?: ?CategorizationType,
  category?: ?TransactionCategory,
  categoryCode?: ?$ElementType<Scalars, 'String'>,
  categoryCodeTranslation?: ?$ElementType<Scalars, 'String'>,
  createdAt: $ElementType<Scalars, 'DateTime'>,
  description: $ElementType<Scalars, 'String'>,
  directDebitFees: Array<DirectDebitFee>,
  documentDownloadUrl?: ?$ElementType<Scalars, 'String'>,
  documentNumber?: ?$ElementType<Scalars, 'String'>,
  documentPreviewUrl?: ?$ElementType<Scalars, 'String'>,
  documentType?: ?DocumentType,
  e2eId?: ?$ElementType<Scalars, 'String'>,
  fees: Array<TransactionFee>,
  foreignCurrency?: ?$ElementType<Scalars, 'String'>,
  iban?: ?$ElementType<Scalars, 'String'>,
  id: $ElementType<Scalars, 'ID'>,
  mandateNumber?: ?$ElementType<Scalars, 'String'>,
  merchantCategoryCode?: ?$ElementType<Scalars, 'String'>,
  merchantCountryCode?: ?$ElementType<Scalars, 'String'>,
  name?: ?$ElementType<Scalars, 'String'>,
  originalAmount?: ?$ElementType<Scalars, 'Float'>,
  paymentMethod: $ElementType<Scalars, 'String'>,
  personalNote?: ?$ElementType<Scalars, 'String'>,
  predictedCategory?: ?TransactionCategory,
  /** Date predicted for tax/vat payment/refund predicted category */
  predictedUserSelectedBookingDate?: ?$ElementType<Scalars, 'DateTime'>,
  purpose?: ?$ElementType<Scalars, 'String'>,
  receiptName?: ?$ElementType<Scalars, 'String'>,
  recurlyInvoiceNumber?: ?$ElementType<Scalars, 'String'>,
  /** Metadata of separate pseudo-transactions created when splitting the parent transaction */
  splits: Array<TransactionSplit>,
  /** View a single Asset for a transaction */
  transactionAsset?: ?Asset,
  /** List Assets for a transaction */
  transactionAssets: Array<Asset>,
  type: TransactionProjectionType,
  /** When a transaction corresponds to a tax or vat payment, the user may specify at which date it should be considered booked */
  userSelectedBookingDate?: ?$ElementType<Scalars, 'DateTime'>,
  /** The date at which the transaction was processed and the amount deducted from the user's account */
  valutaDate?: ?$ElementType<Scalars, 'DateTime'>,
  verified?: ?$ElementType<Scalars, 'Boolean'>,
|};


export type TransactionAssetArgs = {|
  assetId: $ElementType<Scalars, 'ID'>,
|};


export type TransactionTransactionAssetArgs = {|
  assetId: $ElementType<Scalars, 'ID'>,
|};

export type TransactionAsset = {|
  __typename?: 'TransactionAsset',
  assetableId: $ElementType<Scalars, 'ID'>,
  filetype: $ElementType<Scalars, 'String'>,
  fullsize: $ElementType<Scalars, 'String'>,
  id: $ElementType<Scalars, 'ID'>,
  name: $ElementType<Scalars, 'String'>,
  path: $ElementType<Scalars, 'String'>,
  thumbnail: $ElementType<Scalars, 'String'>,
|};

export const TransactionCategoryValues = Object.freeze({
  Private: 'PRIVATE',
  ReverseCharge: 'REVERSE_CHARGE',
  TaxPayment: 'TAX_PAYMENT',
  TaxRefund: 'TAX_REFUND',
  TaxSaving: 'TAX_SAVING',
  Vat: 'VAT',
  Vat_0: 'VAT_0',
  Vat_5: 'VAT_5',
  Vat_7: 'VAT_7',
  Vat_16: 'VAT_16',
  Vat_19: 'VAT_19',
  VatPayment: 'VAT_PAYMENT',
  VatRefund: 'VAT_REFUND',
  VatSaving: 'VAT_SAVING'
});


export type TransactionCategory = $Values<typeof TransactionCategoryValues>;

export type TransactionCondition = {|
  amount_eq?: ?$ElementType<Scalars, 'Int'>,
  amount_gt?: ?$ElementType<Scalars, 'Int'>,
  amount_gte?: ?$ElementType<Scalars, 'Int'>,
  amount_in?: ?Array<$ElementType<Scalars, 'Int'>>,
  amount_lt?: ?$ElementType<Scalars, 'Int'>,
  amount_lte?: ?$ElementType<Scalars, 'Int'>,
  amount_ne?: ?$ElementType<Scalars, 'Int'>,
  assets_exist?: ?$ElementType<Scalars, 'Boolean'>,
  bookingDate_eq?: ?$ElementType<Scalars, 'DateTime'>,
  bookingDate_gt?: ?$ElementType<Scalars, 'DateTime'>,
  bookingDate_gte?: ?$ElementType<Scalars, 'DateTime'>,
  bookingDate_lt?: ?$ElementType<Scalars, 'DateTime'>,
  bookingDate_lte?: ?$ElementType<Scalars, 'DateTime'>,
  bookingDate_ne?: ?$ElementType<Scalars, 'DateTime'>,
  iban_eq?: ?$ElementType<Scalars, 'String'>,
  iban_in?: ?Array<$ElementType<Scalars, 'String'>>,
  iban_like?: ?$ElementType<Scalars, 'String'>,
  iban_likeAny?: ?Array<$ElementType<Scalars, 'String'>>,
  iban_ne?: ?$ElementType<Scalars, 'String'>,
  name_eq?: ?$ElementType<Scalars, 'String'>,
  name_in?: ?Array<$ElementType<Scalars, 'String'>>,
  name_like?: ?$ElementType<Scalars, 'String'>,
  name_likeAny?: ?Array<$ElementType<Scalars, 'String'>>,
  name_ne?: ?$ElementType<Scalars, 'String'>,
  operator?: ?BaseOperator,
  purpose_eq?: ?$ElementType<Scalars, 'String'>,
  purpose_like?: ?$ElementType<Scalars, 'String'>,
  purpose_likeAny?: ?Array<$ElementType<Scalars, 'String'>>,
  purpose_ne?: ?$ElementType<Scalars, 'String'>,
  valutaDate_eq?: ?$ElementType<Scalars, 'DateTime'>,
  valutaDate_gt?: ?$ElementType<Scalars, 'DateTime'>,
  valutaDate_gte?: ?$ElementType<Scalars, 'DateTime'>,
  valutaDate_lt?: ?$ElementType<Scalars, 'DateTime'>,
  valutaDate_lte?: ?$ElementType<Scalars, 'DateTime'>,
  valutaDate_ne?: ?$ElementType<Scalars, 'DateTime'>,
  vatAssets_exist?: ?$ElementType<Scalars, 'Boolean'>,
|};

export type TransactionFee = {|
  __typename?: 'TransactionFee',
  status: TransactionFeeStatus,
  type: TransactionFeeType,
  unitAmount?: ?$ElementType<Scalars, 'Int'>,
  usedAt?: ?$ElementType<Scalars, 'DateTime'>,
|};

export const TransactionFeeStatusValues = Object.freeze({
  Cancelled: 'CANCELLED',
  Charged: 'CHARGED',
  Created: 'CREATED',
  Refunded: 'REFUNDED',
  RefundInitiated: 'REFUND_INITIATED'
});


export type TransactionFeeStatus = $Values<typeof TransactionFeeStatusValues>;

export const TransactionFeeTypeValues = Object.freeze({
  Atm: 'ATM',
  CardReplacement: 'CARD_REPLACEMENT',
  DirectDebitReturn: 'DIRECT_DEBIT_RETURN',
  ForeignTransaction: 'FOREIGN_TRANSACTION',
  SecondReminderEmail: 'SECOND_REMINDER_EMAIL'
});


export type TransactionFeeType = $Values<typeof TransactionFeeTypeValues>;

export type TransactionFilter = {|
  amount_eq?: ?$ElementType<Scalars, 'Int'>,
  amount_gt?: ?$ElementType<Scalars, 'Int'>,
  amount_gte?: ?$ElementType<Scalars, 'Int'>,
  amount_in?: ?Array<$ElementType<Scalars, 'Int'>>,
  amount_lt?: ?$ElementType<Scalars, 'Int'>,
  amount_lte?: ?$ElementType<Scalars, 'Int'>,
  amount_ne?: ?$ElementType<Scalars, 'Int'>,
  assets_exist?: ?$ElementType<Scalars, 'Boolean'>,
  bookingDate_eq?: ?$ElementType<Scalars, 'DateTime'>,
  bookingDate_gt?: ?$ElementType<Scalars, 'DateTime'>,
  bookingDate_gte?: ?$ElementType<Scalars, 'DateTime'>,
  bookingDate_lt?: ?$ElementType<Scalars, 'DateTime'>,
  bookingDate_lte?: ?$ElementType<Scalars, 'DateTime'>,
  bookingDate_ne?: ?$ElementType<Scalars, 'DateTime'>,
  conditions?: ?Array<TransactionCondition>,
  iban_eq?: ?$ElementType<Scalars, 'String'>,
  iban_in?: ?Array<$ElementType<Scalars, 'String'>>,
  iban_like?: ?$ElementType<Scalars, 'String'>,
  iban_likeAny?: ?Array<$ElementType<Scalars, 'String'>>,
  iban_ne?: ?$ElementType<Scalars, 'String'>,
  name_eq?: ?$ElementType<Scalars, 'String'>,
  name_in?: ?Array<$ElementType<Scalars, 'String'>>,
  name_like?: ?$ElementType<Scalars, 'String'>,
  name_likeAny?: ?Array<$ElementType<Scalars, 'String'>>,
  name_ne?: ?$ElementType<Scalars, 'String'>,
  operator?: ?BaseOperator,
  purpose_eq?: ?$ElementType<Scalars, 'String'>,
  purpose_like?: ?$ElementType<Scalars, 'String'>,
  purpose_likeAny?: ?Array<$ElementType<Scalars, 'String'>>,
  purpose_ne?: ?$ElementType<Scalars, 'String'>,
  valutaDate_eq?: ?$ElementType<Scalars, 'DateTime'>,
  valutaDate_gt?: ?$ElementType<Scalars, 'DateTime'>,
  valutaDate_gte?: ?$ElementType<Scalars, 'DateTime'>,
  valutaDate_lt?: ?$ElementType<Scalars, 'DateTime'>,
  valutaDate_lte?: ?$ElementType<Scalars, 'DateTime'>,
  valutaDate_ne?: ?$ElementType<Scalars, 'DateTime'>,
  vatAssets_exist?: ?$ElementType<Scalars, 'Boolean'>,
|};

export type TransactionForAccountingView = {|
  __typename?: 'TransactionForAccountingView',
  amount: $ElementType<Scalars, 'Int'>,
  category?: ?TransactionCategory,
  categoryCode?: ?$ElementType<Scalars, 'String'>,
  id: $ElementType<Scalars, 'ID'>,
  isSplit: $ElementType<Scalars, 'Boolean'>,
  name?: ?$ElementType<Scalars, 'String'>,
  purpose?: ?$ElementType<Scalars, 'String'>,
  selectedBookingDate?: ?$ElementType<Scalars, 'DateTime'>,
  valutaDate: $ElementType<Scalars, 'DateTime'>,
  vatAmount?: ?$ElementType<Scalars, 'Int'>,
  vatRate?: ?$ElementType<Scalars, 'String'>,
|};

export const TransactionProjectionTypeValues = Object.freeze({
  Atm: 'ATM',
  CancellationBooking: 'CANCELLATION_BOOKING',
  CancellationCardTransaction: 'CANCELLATION_CARD_TRANSACTION',
  CancellationCharge: 'CANCELLATION_CHARGE',
  CancellationDirectDebit: 'CANCELLATION_DIRECT_DEBIT',
  CancellationDoubleBooking: 'CANCELLATION_DOUBLE_BOOKING',
  CancellationInterestAccrued: 'CANCELLATION_INTEREST_ACCRUED',
  CancellationSepaCreditTransferReturn: 'CANCELLATION_SEPA_CREDIT_TRANSFER_RETURN',
  CancellationSepaDirectDebitReturn: 'CANCELLATION_SEPA_DIRECT_DEBIT_RETURN',
  CancelManualLoad: 'CANCEL_MANUAL_LOAD',
  CardTransaction: 'CARD_TRANSACTION',
  CardUsage: 'CARD_USAGE',
  CashAtmReversal: 'CASH_ATM_REVERSAL',
  CashManual: 'CASH_MANUAL',
  CashManualReversal: 'CASH_MANUAL_REVERSAL',
  Charge: 'CHARGE',
  CommissionOverdraft: 'COMMISSION_OVERDRAFT',
  CreditPresentment: 'CREDIT_PRESENTMENT',
  CreditTransferCancellation: 'CREDIT_TRANSFER_CANCELLATION',
  CurrencyTransactionCancellation: 'CURRENCY_TRANSACTION_CANCELLATION',
  ChargeRecallRequest: 'ChargeRecallRequest',
  CorrectionCardTransaction: 'CorrectionCardTransaction',
  CorrectionSepaCreditTransfer: 'CorrectionSEPACreditTransfer',
  DebitPresentment: 'DEBIT_PRESENTMENT',
  DepositFee: 'DEPOSIT_FEE',
  DirectDebit: 'DIRECT_DEBIT',
  DirectDebitAutomaticTopup: 'DIRECT_DEBIT_AUTOMATIC_TOPUP',
  DirectDebitReturn: 'DIRECT_DEBIT_RETURN',
  DisputeClearing: 'DISPUTE_CLEARING',
  DisputeTransaction: 'DISPUTE_TRANSACTION',
  ExternalTransaction: 'EXTERNAL_TRANSACTION',
  ForcePostTransaction: 'FORCE_POST_TRANSACTION',
  ForeignPayment: 'FOREIGN_PAYMENT',
  InterestAccrued: 'INTEREST_ACCRUED',
  InternationalCreditTransfer: 'INTERNATIONAL_CREDIT_TRANSFER',
  IntraCustomerTransfer: 'INTRA_CUSTOMER_TRANSFER',
  InterestExcessDeposit: 'InterestExcessDeposit',
  InterestOverdraft: 'InterestOverdraft',
  InterestOverdraftExceeded: 'InterestOverdraftExceeded',
  ManualLoad: 'MANUAL_LOAD',
  Oct: 'OCT',
  Other: 'OTHER',
  PurchaseReversal: 'PURCHASE_REVERSAL',
  Rebooking: 'REBOOKING',
  RebookedSepaCreditTransferReturn: 'RebookedSEPACreditTransferReturn',
  RebookedSepaDirectDebitCoreReturn: 'RebookedSEPADirectDebitCoreReturn',
  ReimbursementCustomer: 'ReimbursementCustomer',
  SepaCreditTransfer: 'SEPA_CREDIT_TRANSFER',
  SepaCreditTransferReturn: 'SEPA_CREDIT_TRANSFER_RETURN',
  SepaDirectDebit: 'SEPA_DIRECT_DEBIT',
  SepaDirectDebitReturn: 'SEPA_DIRECT_DEBIT_RETURN',
  Transfer: 'TRANSFER',
  TransferToBankAccount: 'TRANSFER_TO_BANK_ACCOUNT',
  Target2CreditTransfer: 'Target2CreditTransfer',
  VerificationCode: 'VERIFICATION_CODE',
  WireTransferTopup: 'WIRE_TRANSFER_TOPUP'
});


export type TransactionProjectionType = $Values<typeof TransactionProjectionTypeValues>;

export type TransactionSplit = {|
  __typename?: 'TransactionSplit',
  amount: $ElementType<Scalars, 'Int'>,
  categorizationType?: ?CategorizationType,
  category: TransactionCategory,
  id: $ElementType<Scalars, 'Int'>,
  userSelectedBookingDate?: ?$ElementType<Scalars, 'DateTime'>,
  uuid: $ElementType<Scalars, 'ID'>,
|};

export type TransactionsConnection = {|
  __typename?: 'TransactionsConnection',
  edges: Array<TransactionsConnectionEdge>,
  pageInfo: PageInfo,
|};

export type TransactionsConnectionEdge = {|
  __typename?: 'TransactionsConnectionEdge',
  cursor: $ElementType<Scalars, 'String'>,
  node: Transaction,
|};

export type Transfer = {|
  __typename?: 'Transfer',
  /** The amount of the transfer in cents */
  amount: $ElementType<Scalars, 'Int'>,
  /** List of uploaded Asset files for this transfer */
  assets?: ?Array<Asset>,
  /** The user selected category for the SEPA Transfer */
  category?: ?TransactionCategory,
  /** The end to end ID of the transfer */
  e2eId?: ?$ElementType<Scalars, 'String'>,
  /** The date at which the payment will be executed for Timed Orders or Standing Orders */
  executeAt?: ?$ElementType<Scalars, 'DateTime'>,
  /** The IBAN of the transfer recipient */
  iban: $ElementType<Scalars, 'String'>,
  id: $ElementType<Scalars, 'String'>,
  /** The date at which the last payment will be executed for Standing Orders */
  lastExecutionDate?: ?$ElementType<Scalars, 'DateTime'>,
  /** The date at which the next payment will be executed for Standing Orders */
  nextOccurrence?: ?$ElementType<Scalars, 'DateTime'>,
  /** The personal note of the transfer - 140 max characters */
  personalNote?: ?$ElementType<Scalars, 'String'>,
  /** The purpose of the transfer - 140 max characters */
  purpose?: ?$ElementType<Scalars, 'String'>,
  /** The name of the transfer recipient */
  recipient: $ElementType<Scalars, 'String'>,
  /** The reoccurrence type of the payments for Standing Orders */
  reoccurrence?: ?StandingOrderReoccurrenceType,
  /** The status of the transfer */
  status?: ?TransferStatus,
  /** When a transaction corresponds to a tax or vat payment, the user may specify at which date it should be considered booked */
  userSelectedBookingDate?: ?$ElementType<Scalars, 'DateTime'>,
  uuid: $ElementType<Scalars, 'String'>,
|};

export const TransferStatusValues = Object.freeze({
  Active: 'ACTIVE',
  AuthorizationRequired: 'AUTHORIZATION_REQUIRED',
  Authorized: 'AUTHORIZED',
  Booked: 'BOOKED',
  Canceled: 'CANCELED',
  ConfirmationRequired: 'CONFIRMATION_REQUIRED',
  Confirmed: 'CONFIRMED',
  Created: 'CREATED',
  Executed: 'EXECUTED',
  Failed: 'FAILED',
  Inactive: 'INACTIVE',
  Scheduled: 'SCHEDULED'
});


export type TransferStatus = $Values<typeof TransferStatusValues>;

export type TransferSuggestion = {|
  __typename?: 'TransferSuggestion',
  iban: $ElementType<Scalars, 'String'>,
  name: $ElementType<Scalars, 'String'>,
|};

export const TransferTypeValues = Object.freeze({
  SepaTransfer: 'SEPA_TRANSFER',
  StandingOrder: 'STANDING_ORDER',
  TimedOrder: 'TIMED_ORDER',
  VirtualBooking: 'VIRTUAL_BOOKING'
});


export type TransferType = $Values<typeof TransferTypeValues>;

export type TransfersConnection = {|
  __typename?: 'TransfersConnection',
  edges: Array<TransfersConnectionEdge>,
  pageInfo: PageInfo,
|};

export type TransfersConnectionEdge = {|
  __typename?: 'TransfersConnectionEdge',
  cursor: $ElementType<Scalars, 'String'>,
  node: Transfer,
|};

export type TransfersConnectionFilter = {|
  status?: ?TransferStatus,
|};

export type UnfinishedTransfer = {|
  __typename?: 'UnfinishedTransfer',
  amount: $ElementType<Scalars, 'Int'>,
  iban: $ElementType<Scalars, 'String'>,
  purpose: $ElementType<Scalars, 'String'>,
  recipient: $ElementType<Scalars, 'String'>,
|};

/** The available fields to update an OAuth2 client */
export type UpdateClientInput = {|
  /** The grant types (i.e. ways to obtain access tokens) allowed for the client */
  grantTypes?: ?Array<GrantType>,
  /** The id of the OAuth2 client to update */
  id: $ElementType<Scalars, 'String'>,
  /** The name of the OAuth2 client displayed when users log in */
  name?: ?$ElementType<Scalars, 'String'>,
  /** The URL to redirect to after authentication */
  redirectUri?: ?$ElementType<Scalars, 'String'>,
  /** The scopes the client has access to, limiting access to the corresponding parts of the API */
  scopes?: ?Array<ScopeType>,
  /** The OAuth2 client secret */
  secret?: ?$ElementType<Scalars, 'String'>,
|};

export type UpdateDocumentMetadata = {|
  /** Document's category Id */
  documentCategoryId?: ?$ElementType<Scalars, 'String'>,
|};

export type UpdateSubscriptionPlanResult = {|
  __typename?: 'UpdateSubscriptionPlanResult',
  couponCode?: ?$ElementType<Scalars, 'String'>,
  hasCanceledDowngrade: $ElementType<Scalars, 'Boolean'>,
  hasOrderedPhysicalCard: $ElementType<Scalars, 'Boolean'>,
  newPlan: $ElementType<Scalars, 'String'>,
  previousPlans: Array<PurchaseType>,
  updateActiveAt: $ElementType<Scalars, 'String'>,
|};

export type UpdateTaxNumberInput = {|
  description: $ElementType<Scalars, 'String'>,
  isMainBusinessTaxNumber: $ElementType<Scalars, 'Boolean'>,
  taxNumber: $ElementType<Scalars, 'String'>,
  type: TaxNumberType,
  validFrom?: ?$ElementType<Scalars, 'DateTime'>,
|};

export type UpdateTransactionSplitsInput = {|
  amount: $ElementType<Scalars, 'Int'>,
  category: TransactionCategory,
  id: $ElementType<Scalars, 'Int'>,
  userSelectedBookingDate?: ?$ElementType<Scalars, 'DateTime'>,
|};

/** The available fields to update a transfer */
export type UpdateTransferInput = {|
  /** The amount of the Standing Order payment in cents */
  amount?: ?$ElementType<Scalars, 'Int'>,
  /** The user selected category for the SEPA Transfer */
  category?: ?TransactionCategory,
  /** The end to end ID of the Standing Order, if not specified with the update, it will be set to null */
  e2eId?: ?$ElementType<Scalars, 'String'>,
  /** The ID of the transfer to update */
  id: $ElementType<Scalars, 'String'>,
  /** The date at which the last payment will be executed */
  lastExecutionDate?: ?$ElementType<Scalars, 'DateTime'>,
  /** The personal note of the transfer - 140 max characters */
  personalNote?: ?$ElementType<Scalars, 'String'>,
  /** The purpose of the Standing Order - 140 max characters, if not specified with the update, it will be set to null */
  purpose?: ?$ElementType<Scalars, 'String'>,
  /** The reoccurrence type of the payments for Standing Orders */
  reoccurrence?: ?StandingOrderReoccurrenceType,
  /** The type of transfer to update, currently only Standing Orders are supported */
  type: TransferType,
  /** When a transaction corresponds to a tax or vat payment, the user may specify at which date it should be considered booked */
  userSelectedBookingDate?: ?$ElementType<Scalars, 'DateTime'>,
|};

export type User = {|
  __typename?: 'User',
  /** The current state of user's Kontist account based on his subscription plan */
  accountState?: ?AccountState,
  /** Information about the plans a user can subscribe to */
  availablePlans: Array<SubscriptionPlan>,
  /** The state of banners in mobile or web app for the user */
  banners?: ?Array<Banner>,
  birthDate?: ?$ElementType<Scalars, 'DateTime'>,
  birthPlace?: ?$ElementType<Scalars, 'String'>,
  /** User's business addresses */
  businessAddresses: Array<BusinessAddress>,
  /** Business description provided by the user */
  businessPurpose?: ?$ElementType<Scalars, 'String'>,
  businessTradingName?: ?$ElementType<Scalars, 'String'>,
  city?: ?$ElementType<Scalars, 'String'>,
  /** The details of an existing OAuth2 client */
  client?: ?Client,
  /** The list of all OAuth2 clients for the current user */
  clients: Array<Client>,
  companyType?: ?CompanyType,
  country?: ?$ElementType<Scalars, 'String'>,
  /** Coupon code assigned to the user that can be redeemed during subscription update */
  couponCodeOffer?: ?$ElementType<Scalars, 'String'>,
  createdAt: $ElementType<Scalars, 'DateTime'>,
  /** User's documents */
  documentCategories: Array<DocumentCategory>,
  /** User's documents */
  documents: Array<Document>,
  /** The economic sector of the user's business */
  economicSector?: ?$ElementType<Scalars, 'String'>,
  email: $ElementType<Scalars, 'String'>,
  emailDocument: EmailDocument,
  emailDocuments: Array<EmailDocument>,
  /** Active user features */
  features: Array<$ElementType<Scalars, 'String'>>,
  firstName?: ?$ElementType<Scalars, 'String'>,
  gender?: ?Gender,
  hasBusinessTaxNumber?: ?$ElementType<Scalars, 'Boolean'>,
  hasBusinessTaxNumberUpdatedAt?: ?$ElementType<Scalars, 'DateTime'>,
  /** IDNow identification details for user */
  identification: IdentificationDetails,
  /** The link to use for IDNow identification */
  identificationLink?: ?$ElementType<Scalars, 'String'>,
  /** The user's IDNow identification status */
  identificationStatus?: ?IdentificationStatus,
  /** Bookkeeping partners information for user */
  integrations: Array<UserIntegration>,
  invoice?: ?Invoice,
  invoiceAsset: $ElementType<Scalars, 'String'>,
  /** The list of all customers of the current user */
  invoiceCustomers?: ?Array<InvoiceCustomerOutput>,
  invoicePdf: $ElementType<Scalars, 'String'>,
  invoiceSettings?: ?InvoiceSettingsOutput,
  invoices: InvoicingDashboardData,
  isSelfEmployed?: ?$ElementType<Scalars, 'Boolean'>,
  /** Indicates whether the user pays taxes in the US */
  isUSPerson?: ?$ElementType<Scalars, 'Boolean'>,
  language?: ?$ElementType<Scalars, 'String'>,
  /** User's last business address before a specific date */
  lastBusinessAddress: BusinessAddress,
  lastName?: ?$ElementType<Scalars, 'String'>,
  mainAccount?: ?Account,
  /** User metadata. These fields are likely to get frequently updated or changed. */
  metadata: UserMetadata,
  mobileNumber?: ?$ElementType<Scalars, 'String'>,
  nationality?: ?Nationality,
  /** All push-notification types and their state */
  notifications: Array<Notification>,
  /** Business economic sector provided by the user */
  otherEconomicSector?: ?$ElementType<Scalars, 'String'>,
  poaExportedAt?: ?$ElementType<Scalars, 'DateTime'>,
  poaSignedAt?: ?$ElementType<Scalars, 'DateTime'>,
  /** Retrieves signed POA PDF for user. */
  poaUrl?: ?$ElementType<Scalars, 'String'>,
  postCode?: ?$ElementType<Scalars, 'String'>,
  /** Premium subscription discount for user */
  premiumSubscriptionDiscount: Discount,
  publicId: $ElementType<Scalars, 'ID'>,
  questionnaire?: ?Questionnaire,
  receiptMatchingIntroDismissedAt?: ?$ElementType<Scalars, 'DateTime'>,
  /** The user's associated Recurly Account */
  recurlyAccount?: ?RecurlyAccount,
  /** Referral details for user */
  referral: ReferralDetails,
  /** The user's referral code to use for promotional purposes */
  referralCode?: ?$ElementType<Scalars, 'String'>,
  /** The user's Solaris screening status */
  screeningStatus?: ?ScreeningStatus,
  street?: ?$ElementType<Scalars, 'String'>,
  /** The available subscription plans */
  subscriptionPlans: SubscriptionPlansResponse,
  /** The plans a user has subscribed to */
  subscriptions: Array<UserSubscription>,
  /** Tax details for user */
  taxDetails: UserTaxDetails,
  /** User's tax numbers */
  taxNumbers: Array<TaxNumber>,
  taxPaymentFrequency?: ?TaxPaymentFrequency,
  taxRate?: ?$ElementType<Scalars, 'Int'>,
  taxServiceOnboardingCompletedAt?: ?$ElementType<Scalars, 'DateTime'>,
  unfinishedTransfers: Array<UnfinishedTransfer>,
  untrustedPhoneNumber?: ?$ElementType<Scalars, 'String'>,
  vatDeclarationBannerDismissedAt?: ?$ElementType<Scalars, 'DateTime'>,
  vatNumber?: ?$ElementType<Scalars, 'String'>,
  vatPaymentFrequency?: ?PaymentFrequency,
  vatRate?: ?UserVatRate,
|};


export type UserAvailablePlansArgs = {|
  couponCode?: ?$ElementType<Scalars, 'String'>,
|};


export type UserBannersArgs = {|
  isWebapp?: ?$ElementType<Scalars, 'Boolean'>,
|};


export type UserClientArgs = {|
  id: $ElementType<Scalars, 'String'>,
|};


export type UserEmailDocumentArgs = {|
  id?: ?$ElementType<Scalars, 'String'>,
|};


export type UserEmailDocumentsArgs = {|
  filterByUnmatched?: ?$ElementType<Scalars, 'Boolean'>,
  uploadSources?: ?Array<DocumentUploadSource>,
|};


export type UserInvoiceArgs = {|
  id: $ElementType<Scalars, 'String'>,
|};


export type UserInvoiceAssetArgs = {|
  invoiceId: $ElementType<Scalars, 'ID'>,
  isBase64: $ElementType<Scalars, 'Boolean'>,
|};


export type UserInvoicesArgs = {|
  pageNumber: $ElementType<Scalars, 'Int'>,
|};


export type UserMetadataArgs = {|
  platform?: ?Platform,
|};


export type UserPremiumSubscriptionDiscountArgs = {|
  couponCode?: ?$ElementType<Scalars, 'String'>,
|};


export type UserQuestionnaireArgs = {|
  type: QuestionnaireType,
  year: $ElementType<Scalars, 'Int'>,
|};


export type UserSubscriptionPlansArgs = {|
  couponCode?: ?$ElementType<Scalars, 'String'>,
|};

export type UserDependent = {|
  __typename?: 'UserDependent',
  birthDate: $ElementType<Scalars, 'DateTime'>,
  deTaxId?: ?$ElementType<Scalars, 'String'>,
  firstName: $ElementType<Scalars, 'String'>,
  id: $ElementType<Scalars, 'ID'>,
  lastName: $ElementType<Scalars, 'String'>,
  type: UserDependentType,
|};

export type UserDependentInput = {|
  birthDate: $ElementType<Scalars, 'String'>,
  deTaxId?: ?$ElementType<Scalars, 'String'>,
  firstName: $ElementType<Scalars, 'String'>,
  id?: ?$ElementType<Scalars, 'ID'>,
  lastName: $ElementType<Scalars, 'String'>,
  type: UserDependentType,
|};

export const UserDependentTypeValues = Object.freeze({
  Child: 'CHILD',
  Partner: 'PARTNER'
});


export type UserDependentType = $Values<typeof UserDependentTypeValues>;

export type UserIntegration = {|
  __typename?: 'UserIntegration',
  hasAccount: $ElementType<Scalars, 'Boolean'>,
  isConnected: $ElementType<Scalars, 'Boolean'>,
  type: IntegrationType,
|};

export type UserMetadata = {|
  __typename?: 'UserMetadata',
  acceptedTermsVersion?: ?$ElementType<Scalars, 'String'>,
  /** List of months user can request a bank statement for */
  availableStatements?: ?Array<AvailableStatements>,
  categorizationScreenShown?: ?$ElementType<Scalars, 'Boolean'>,
  currentTermsAccepted: $ElementType<Scalars, 'Boolean'>,
  currentTermsVersion: $ElementType<Scalars, 'String'>,
  directDebitMandateAccepted: $ElementType<Scalars, 'Boolean'>,
  emailConnections: Array<$ElementType<Scalars, 'String'>>,
  emailFetchSetupUrl?: ?$ElementType<Scalars, 'String'>,
  intercomDigest?: ?$ElementType<Scalars, 'String'>,
  /** Is user's Kontist account closed */
  isAccountClosed: $ElementType<Scalars, 'Boolean'>,
  marketingConsentAccepted: $ElementType<Scalars, 'Boolean'>,
  phoneNumberVerificationRequired: $ElementType<Scalars, 'Boolean'>,
  signupCompleted: $ElementType<Scalars, 'Boolean'>,
  taxAdvisoryTermsVersionAccepted: $ElementType<Scalars, 'Boolean'>,
|};

export type UserProductInput = {|
  description?: ?$ElementType<Scalars, 'String'>,
  id?: ?$ElementType<Scalars, 'String'>,
  price?: ?$ElementType<Scalars, 'Float'>,
  vat?: ?$ElementType<Scalars, 'String'>,
|};

export const UserReviewStatusValues = Object.freeze({
  Feedback: 'FEEDBACK',
  NegativePending: 'NEGATIVE_PENDING',
  NegativeReminder: 'NEGATIVE_REMINDER',
  PositivePending: 'POSITIVE_PENDING',
  PositiveReminder: 'POSITIVE_REMINDER',
  Reviewed: 'REVIEWED'
});


export type UserReviewStatus = $Values<typeof UserReviewStatusValues>;

export type UserSubscription = {|
  __typename?: 'UserSubscription',
  /** The state of the subscription */
  state: PurchaseState,
  /** The type of the plans a user has subscribed to */
  type: PurchaseType,
|};

export type UserTaxDetails = {|
  __typename?: 'UserTaxDetails',
  adjustAdvancePayments: $ElementType<Scalars, 'Boolean'>,
  deTaxId?: ?$ElementType<Scalars, 'String'>,
  dependents?: ?Array<UserDependent>,
  hasBusinessTaxNumber?: ?$ElementType<Scalars, 'Boolean'>,
  lastTaxPaymentDate?: ?$ElementType<Scalars, 'DateTime'>,
  lastVatPaymentDate?: ?$ElementType<Scalars, 'DateTime'>,
  needsToProvideTaxIdentification: $ElementType<Scalars, 'Boolean'>,
  permanentExtensionStatus?: ?PermanentExtensionStatus,
  taxNumber?: ?$ElementType<Scalars, 'String'>,
  taxPaymentFrequency?: ?TaxPaymentFrequency,
  taxRate?: ?$ElementType<Scalars, 'Int'>,
  vatNumber?: ?$ElementType<Scalars, 'String'>,
  vatPaymentFrequency?: ?PaymentFrequency,
  vatRate?: ?UserVatRate,
|};

export type UserTaxDetailsInput = {|
  deTaxId?: ?$ElementType<Scalars, 'String'>,
  dependentsTaxIds?: ?Array<DependentsTaxIds>,
  hasBusinessTaxNumber?: ?$ElementType<Scalars, 'Boolean'>,
  permanentExtensionStatus?: ?PermanentExtensionStatus,
  taxNumber?: ?$ElementType<Scalars, 'String'>,
  vatNumber?: ?$ElementType<Scalars, 'String'>,
  vatPaymentFrequency?: ?PaymentFrequency,
|};

export type UserUpdateInput = {|
  /** The version of terms user has accepted */
  acceptedTermsVersion?: ?$ElementType<Scalars, 'String'>,
  /** Indicates if user started upgrading to accounting plan */
  accountingOnboardingStarted?: ?$ElementType<Scalars, 'Boolean'>,
  accountingTool?: ?$ElementType<Scalars, 'String'>,
  adjustAdvancePayments?: ?$ElementType<Scalars, 'Boolean'>,
  birthDate?: ?$ElementType<Scalars, 'DateTime'>,
  birthPlace?: ?$ElementType<Scalars, 'String'>,
  businessPurpose?: ?$ElementType<Scalars, 'String'>,
  businessTradingName?: ?$ElementType<Scalars, 'String'>,
  categorizationScreenShown?: ?$ElementType<Scalars, 'Boolean'>,
  city?: ?$ElementType<Scalars, 'String'>,
  companyType?: ?CompanyType,
  country?: ?Nationality,
  /** Indicates user has accepted Kontist direct debit mandate */
  directDebitMandateAccepted?: ?$ElementType<Scalars, 'Boolean'>,
  economicSector?: ?$ElementType<Scalars, 'String'>,
  firstName?: ?$ElementType<Scalars, 'String'>,
  gender?: ?Gender,
  hasEmployees?: ?$ElementType<Scalars, 'Boolean'>,
  hasMoreThanOneBusiness?: ?$ElementType<Scalars, 'Boolean'>,
  hasSecondBusinessAccount?: ?$ElementType<Scalars, 'Boolean'>,
  idnowReminderTime?: ?$ElementType<Scalars, 'DateTime'>,
  idnowReminderType?: ?IdnowReminderType,
  internationalCustomers?: ?InternationalCustomers,
  isSelfEmployed?: ?$ElementType<Scalars, 'Boolean'>,
  /** Indicates whether the user pays taxes in the US */
  isUSPerson?: ?$ElementType<Scalars, 'Boolean'>,
  language?: ?$ElementType<Scalars, 'String'>,
  lastName?: ?$ElementType<Scalars, 'String'>,
  /** Indicates user has accepted to receive Kontist marketing communication */
  marketingConsentAccepted?: ?$ElementType<Scalars, 'Boolean'>,
  maximumCashTransactionsPercentage?: ?MaximumCashTransactionsPercentage,
  nationality?: ?Nationality,
  /** Indicates user has confirmed he is acting as a business and not a consumer */
  nonConsumerConfirmed?: ?$ElementType<Scalars, 'Boolean'>,
  otherEconomicSector?: ?$ElementType<Scalars, 'String'>,
  /** Indicates user has confirmed he is opening their account in their name, for the use of their business */
  ownEconomicInterestConfirmed?: ?$ElementType<Scalars, 'Boolean'>,
  permanentExtensionStatus?: ?PermanentExtensionStatus,
  postCode?: ?$ElementType<Scalars, 'String'>,
  profession?: ?$ElementType<Scalars, 'String'>,
  street?: ?$ElementType<Scalars, 'String'>,
  subjectToAccounting?: ?ThreeStateAnswer,
  taxAdvisoryTermsVersionAccepted?: ?$ElementType<Scalars, 'String'>,
  /** Indicates if user started upgrading to Kontax plan */
  taxServiceOnboardingStarted?: ?$ElementType<Scalars, 'Boolean'>,
  /** Sets a mobile number for the user to be verified later */
  untrustedPhoneNumber?: ?$ElementType<Scalars, 'String'>,
  vatNumber?: ?$ElementType<Scalars, 'String'>,
  vatPaymentFrequency?: ?PaymentFrequency,
  vatRate?: ?$ElementType<Scalars, 'Int'>,
  workingInEcommerce?: ?$ElementType<Scalars, 'Boolean'>,
|};

export const UserVatRateValues = Object.freeze({
  Vat_0: 'VAT_0',
  Vat_19: 'VAT_19'
});


export type UserVatRate = $Values<typeof UserVatRateValues>;

export type VirtualCardDetailsArgs = {|
  deviceId: $ElementType<Scalars, 'String'>,
  jwe: Jwe,
  jwk: Jwk,
  signature: $ElementType<Scalars, 'String'>,
|};

export type WhitelistCardResponse = {|
  __typename?: 'WhitelistCardResponse',
  id: $ElementType<Scalars, 'String'>,
  resolution: CaseResolution,
  whitelistedUntil: $ElementType<Scalars, 'String'>,
|};
